---
import petProfilePhoto from "@/assets/petProfilePhoto.png";
import ContentContainer from "@/contexts/_shared/client/presentation/components/content-container.component.astro";
import BaseTextInput from "@/contexts/_shared/client/presentation/components/base-text-input.component.astro";
import BaseTextArea from "@/contexts/_shared/client/presentation/components/base-text-area.component.astro";
import BaseCombobox from "@/contexts/_shared/client/presentation/components/base-combobox.component.astro";
import DeletePetMedicalAppointmentDialog from "@/contexts/medical_histories/client/presentation/components/delete-pet-medical-appointment-dialog.component.astro";
import { getMedicalAppointment, type MedicalAppointmentInfo } from "@/contexts/medical_histories/server/application/usecases/get-medicalappointment.usecase";
import { getPet } from "@/contexts/pets/server/application/usecases/get-pet.usecase";
import { getAllProfilesByRoleId } from "@/contexts/profiles/server/application/usecases/get-all-profiles-by-role-id.usecase";
import { getAuthenticatedUserIdOrRedirect } from "@/contexts/_shared/server/application/usecases/get-authenticated-user-or-redirect";
import type { PetInfo } from "@/contexts/pets/client/usecases/get-pet.usecase";

const authenticatedUserId = getAuthenticatedUserIdOrRedirect(Astro);
const { petId, medicalAppointmentId } = Astro.props;

let pet: PetInfo | null = null;
let medicalAppointment: MedicalAppointmentInfo | null = null;
let doctorProfiles: any[] = [];

const getPetResult = await getPet(petId);
if (getPetResult.success) {
    pet = getPetResult.data;
}

const getMedicalAppointmentResult = await getMedicalAppointment(petId, medicalAppointmentId);
if (getMedicalAppointmentResult.ok) {
    medicalAppointment = await getMedicalAppointmentResult.json();
}

const getDoctorProfilesResult = await getAllProfilesByRoleId(import.meta.env.VETERINARIAN_ROLE_ID, authenticatedUserId);
if (getDoctorProfilesResult.success) {
    doctorProfiles = getDoctorProfilesResult.data;
    doctorProfiles = doctorProfiles.map(dp => ({
            id: dp.id,
            name: `${dp.name} ${dp.lastname} ${dp.me ? '(Tú)' : ''}`,
            me: dp.me,
        }));
}

const profileInputs = [
    {
        id: "name",
        name: "name",
        type: "text",
        autocomplete: "name",
        label: "Nombre",
        value: pet?.name,
    },
    {
        id: "owner",
        name: "owner",
        type: "text",
        autocomplete: "owner",
        label: "Propietario", // TODO: Cambiar por select de propietarios
        value: pet?.ownerName,
    },
];

const medicalAppointmentInfoInputs = [
    {
        id: "doctor",
        name: "doctor",
        type: "combobox",
        label: "Veterinario",
        value: medicalAppointment ? 
            medicalAppointment?.doctorProfileId.toString()
            : (doctorProfiles && doctorProfiles.length > 0) ? doctorProfiles.find(dp => dp.me === true)?.id.toString() : "",
        options: doctorProfiles ?? [],
    },
    // {
    //     id: "date",
    //     name: "date",
    //     type: "date",
    //     autocomplete: "appointmentDate",
    //     label: "Fecha de la cita",
    //     value: medicalAppointment ? 
    //         medicalAppointment.appointmentDate ? (new Date(medicalAppointment.appointmentDate)).toISOString().split('T')[0] : ""
    //         : new Date().toISOString().split('T')[0],
    // },
];

const medicalAppointmentSections = [
    {
        // id: "details",
        title: "Datos de la cita",
        children: [
            [
                {
                    id: "weight",
                    name: "weight",
                    type: "number",
                    autocomplete: "weight",
                    label: "Peso (kg)",
                    value: medicalAppointment?.weight,
                },
                {
                    id: "date",
                    name: "date",
                    type: "date",
                    autocomplete: "appointmentDate",
                    label: "Fecha de la cita",
                    value: medicalAppointment ? 
                        medicalAppointment.appointmentDate ? (new Date(medicalAppointment.appointmentDate)).toISOString().split('T')[0] : ""
                        : new Date().toISOString().split('T')[0],
                },
            ],
            {
                id: "details",
                name: "details",
                label: "Descripción",
                value: medicalAppointment?.details,
            }
        ],
        // name: "details",
        // label: "Datos de la cita",
        // value: medicalAppointment?.details,
    },
    {
        id: "observations",
        name: "observations",
        label: "Observaciones",
        value: medicalAppointment?.observations,
    },
    {
        id: "prescription",
        name: "prescription",
        label: "Receta / Tratamiento",
        value: medicalAppointment?.prescription,
    },
];

---

<ContentContainer class="h-full">
    <div class="mb-8 flex items-start gap-4">
        <a href={`/app/pets/${petId}/medical-history`} class="p-2 rounded-full text-gray-600 hover:bg-gray-200 transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-[#6faab5] -mt-1" aria-label="Volver a la página de inicio">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                <path stroke-linecap="round" stroke-linejoin="round" d="M15 19l-7-7 7-7" />
            </svg>
        </a>
        <h2 class="text-2xl font-bold leading-tight text-gray-900 mb-8">
            {
                medicalAppointment ? 
                    `Cita médica N° ${medicalAppointment?.appointmentNumber}`
                    :
                    "Nueva cita médica"
            }
        </h2>
    </div>
    <form id="medicalappointment-form" data-pet-id={pet?.id} data-medical-appointment-id={medicalAppointment?.id} novalidate>
        <div class="grid grid-cols-1 lg:grid-cols-6 gap-8 items-center">
            <div class="lg:col-span-2 flex flex-col gap-6">
                <div class="bg-gray-200 rounded-xl shadow-lg p-7 text-left" transition:name={pet ? `pet-profile-${pet.id}`: ''}>
                    <div class="flex flex-row items-center justify-between mb-3">
                        <h3 class="font-semibold">Datos de la mascota</h3>
                        <a href={`/app/pets/${pet?.id}`} title={`Ver más de ${pet?.name}`} class="text-gray-500 hover:text-gray-800 transition-colors">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" />
                            </svg>
                        </a>
                    </div>
                    <div class="flex flex-row items-center gap-4">
                        <div class="w-30 h-30 shrink-0">
                            <img 
                                src={petProfilePhoto.src} 
                                alt={`Foto de ${pet?.name || 'mascota'}`} 
                                class="rounded-full w-30 h-30 object-cover border-4 border-white shadow-md"
                            />
                        </div>
                        <div class="flex flex-col w-full">
                        {
                            profileInputs.map(profileInput => 
                                <BaseTextInput {...profileInput} readonly />
                            )
                        }
                        </div>
                    </div>
                </div>
                <div class="bg-white rounded-xl shadow-lg p-7 text-left">
                    <h3 class="font-semibold mb-3">Información de la cita médica</h3>
                    <div class="flex flex-col items-center w-full">
                    {
                        medicalAppointmentInfoInputs.map(infoInput => 
                            (infoInput.type === "combobox") ? 
                                <BaseCombobox {...infoInput} />
                                :
                                <BaseTextInput {...infoInput} />
                        )
                    }
                    </div>
                </div>
            </div>
            <div class="lg:col-span-4 space-y-6">
                {
                    medicalAppointmentSections.map(section => 
                        section.children ?
                            <div class="bg-white rounded-xl shadow-lg p-7 pb-4">
                                <h3 class="mb-3">{section.title}</h3>
                            {
                                section.children.map(child => 
                                    Array.isArray(child) ?
                                        <div class="flex gap-4">
                                        {
                                            child.map(input => 
                                                <BaseTextInput {...input} />
                                            )
                                        }
                                        </div>
                                        : 
                                        <BaseTextArea {...child} />
                                )
                            }
                            </div>
                            :
                            <div class="bg-white rounded-xl shadow-lg p-7 pb-4">
                                <BaseTextArea {...section} />
                            </div>
                    )
                }
            </div>
        </div>
        <div class="flex sm:flex-wrap sm:flex-row sm:justify-end mt-7 gap-4">
            <button id="submit-button" type="submit" class="rounded-md bg-[#6faab5] px-6 py-2.5 text-center text-sm font-semibold text-white shadow-sm hover:bg-[#5f9ea8] focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-[#6faab5] cursor-pointer  disabled:opacity-50 disabled:cursor-not-allowed" disabled>
                {
                    medicalAppointment ? "Guardar cambios" : "Crear cita médica"
                }
            </button>
            { medicalAppointment &&
                <>
                    <button id="open-delete-dialog-button" type="button" class="rounded-md bg-red-600 px-4 py-2 text-sm font-semibold text-white shadow-sm hover:bg-red-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-red-600 cursor-pointer">
                        Eliminar
                    </button>
                    <DeletePetMedicalAppointmentDialog />
                </>
            }
        </div>
    </form>
</ContentContainer>

<script>
    import { SaveMedicalAppointmentResource } from "@/contexts/medical_histories/server/interfaces/api/resources/save-medical-appointment.resource";
    import { createMedicalAppointment } from "@/contexts/medical_histories/client/usecases/create-medicalappointment.usecase";
    import { updateMedicalAppointment } from "@/contexts/medical_histories/client/usecases/update-medicalappointment.usecase";

    function initializePageScripts() {
        const form = document.getElementById('medicalappointment-form') as HTMLFormElement | null;

        if (form) {
            const weightInput = document.getElementById('weight') as HTMLInputElement;
            const detailsInput = document.getElementById('details') as HTMLInputElement;
            const observationsInput = document.getElementById('observations') as HTMLInputElement;
            const prescriptionInput = document.getElementById('prescription') as HTMLInputElement;
            const doctorInput = document.getElementById('doctor-value') as HTMLInputElement;
            const dateInput = document.getElementById('date') as HTMLInputElement;
            const submitButton = document.getElementById('submit-button') as HTMLButtonElement;
            const formError = document.getElementById('form-error') as HTMLDivElement;
            
            // Habilita el botón de envío una vez que el script se ha cargado.
            if (submitButton) {
                submitButton.disabled = false;
            }
            
            const isNewMedicalAppointment = !form.dataset.medicalAppointmentId;

            const showError = (input: HTMLInputElement, message: string) => {
                const errorContainer = document.getElementById(`${input.id}-error-container`);
                if (errorContainer) {
                    errorContainer.textContent = message;
                }
                // Cambia el color del borde del input a rojo
                input.classList.remove('outline-gray-300', 'focus:outline-blue-800');
                input.classList.add('outline-red-500', 'focus:outline-red-500');
            }

            const clearError = (input: HTMLInputElement) => {
                const errorContainer = document.getElementById(`${input.id}-error-container`);
                if (errorContainer) {
                    errorContainer.textContent = '';
                }
                // Restaura el color del borde del input
                input.classList.remove('outline-red-500', 'focus:outline-red-500');
                input.classList.add('outline-gray-300', 'focus:outline-blue-800');
            }

            form.addEventListener('submit', async (event) => {
                event.preventDefault();

                // Limpia errores previos
                clearError(detailsInput);
                clearError(observationsInput);
                clearError(prescriptionInput);
                if (formError) {
                    formError.textContent = '';
                }

                const weight = weightInput.value;
                const details = detailsInput.value;
                const observations = observationsInput.value;
                const prescription = prescriptionInput.value;
                const doctor = doctorInput.value;
                const date = dateInput.value;

                let isValid = true;

                // Validaciones
                if (!weight) {
                    showError(weightInput, 'El peso es obligatorio');
                    isValid = false;
                } else if (isNaN(Number(weight))) {
                    showError(weightInput, 'El peso debe ser un número');
                    isValid = false;
                } else if (Number(weight) <= 0) {
                    showError(weightInput, 'El peso debe ser mayor a 0');
                    isValid = false;
                }

                if (!details) {
                    showError(detailsInput, 'Los detalles son obligatorios');
                    isValid = false;
                }

                if (!observations) {
                    showError(observationsInput, 'Las observaciones son obligatorias');
                    isValid = false;
                }

                if (!prescription) {
                    showError(prescriptionInput, 'La receta/tratamiento es obligatoria');
                    isValid = false;
                }

                if (!doctor) {
                    showError(document.getElementById('doctor') as HTMLInputElement, 'El veterinario es obligatorio');
                    isValid = false;
                }

                if (!date) {
                    showError(dateInput, 'La fecha de la cita es obligatoria');
                    isValid = false;
                }

                if (isValid) {
                    submitButton.disabled = true;

                    const resource = new SaveMedicalAppointmentResource(Number(weight), details, observations, prescription, new Date(date), doctor ?? 0);

                    if (isNewMedicalAppointment) {
                        submitButton.textContent = 'Creando cita médica...';

                        try {
                            const response = await createMedicalAppointment(form.dataset.petId!, resource);
                            if (response.success) {
                                window.location.href = `/app/pets/${form.dataset.petId!}/medical-history`;
                            } else {
                                formError.textContent = response.errorMessage ?? 'Error al crear cita médica. Por favor, inténtalo de nuevo.';
                            }
                        } catch (error) {
                            console.error('Error al crear cita médica:', error);
                            formError.textContent = 'Error al crear cita médica. Por favor, inténtalo de nuevo.';
                        } finally {
                            submitButton.disabled = false;
                            submitButton.textContent = 'Crear cita médica';
                        }
                    } else {
                        submitButton.textContent = 'Actualizando cita médica...';

                        try {
                            const response = await updateMedicalAppointment(form.dataset.petId!, form.dataset.medicalAppointmentId!, resource);
                            if (response.success) {
                                // window.location.reload();
                                window.location.href = `/app/pets/${form.dataset.petId!}/medical-history`;
                            } else {
                                formError.textContent = response.errorMessage ?? 'Error al actualizar la cita médica. Por favor, inténtalo de nuevo.';
                            }
                        } catch (error) {
                            console.error('Error al actualizar la cita médica:', error);
                            formError.textContent = 'Error al actualizar la cita médica. Por favor, inténtalo de nuevo.';
                        } finally {
                            submitButton.disabled = false;
                            submitButton.textContent = 'Guardar cambios';
                        }
                    }
                }
            });
        }

        // --- Lógica para el botón de eliminar ---
        const openDialogButton = document.getElementById('open-delete-dialog-button');
        // Dialog in delete-pet-dialog.component.astro
        const dialog = document.getElementById('delete-dialog');
        const toggleDialog = (show: boolean) => {
            dialog?.classList.toggle('hidden', !show);
        }

        openDialogButton?.addEventListener('click', () => toggleDialog(true));
    }

    // Ejecuta los scripts en la carga inicial de la página (con View Transitions) 
    // y en cada navegación del lado del cliente.
    document.addEventListener('astro:page-load', initializePageScripts);
</script>