---
import petProfilePhoto from "@/assets/petProfilePhoto.png";
import ContentContainer from "@/contexts/_shared/client/presentation/components/content/content-container.component.astro";
import DynamicInput from "@/contexts/_shared/client/presentation/components/inputs/dynamic-input.component.astro";
// import BaseTextInput from "@/contexts/_shared/client/presentation/components/base-text-input.component.astro";
// import BaseTextArea from "@/contexts/_shared/client/presentation/components/(old)base-text-area.component.astro";
// import BaseCombobox from "@/contexts/_shared/client/presentation/components/(old)base-combobox.component.astro";
import DeletePetMedicalAppointmentDialog from "@/contexts/medical_histories/client/presentation/components/delete-pet-medical-appointment-dialog.component.astro";
import { getMedicalAppointment, type MedicalAppointmentInfo } from "@/contexts/medical_histories/server/application/usecases/get-medicalappointment.usecase";
import { getPet } from "@/contexts/pets/server/application/usecases/get-pet.usecase";
import { getAllProfilesByRoleId } from "@/contexts/profiles/server/application/usecases/get-all-profiles-by-role-id.usecase";
import { getAuthenticatedUserIdOrRedirect } from "@/contexts/_shared/server/application/usecases/get-authenticated-user-or-redirect";
import type { PetInfo } from "@/contexts/pets/client/usecases/get-pet.usecase";
import ActionButton from "@/contexts/_shared/client/presentation/components/actions/action-button.component.astro";
import ContentTop from "@/contexts/_shared/client/presentation/components/content/content-top.component.astro";
import SimpleForm from "@/contexts/_shared/client/presentation/components/forms/simple-form.component.astro";
import GridForm from "@/contexts/_shared/client/presentation/components/forms/grid-form.component.astro";
import PetMiniprofileCard from "@/contexts/pets/client/presentation/components/pet-miniprofile-card.component.astro";
import SimpleCard from "@/contexts/_shared/client/presentation/components/cards/simple-card.component.astro";

const authenticatedUserId = getAuthenticatedUserIdOrRedirect(Astro);
const { petId, medicalAppointmentId } = Astro.props;

let pet: PetInfo | null = null;
let medicalAppointment: MedicalAppointmentInfo | null = null;
let doctorProfiles: any[] = [];

const getPetResult = await getPet(petId);
if (getPetResult.success) {
    pet = getPetResult.data ?? null;
}

const getMedicalAppointmentResult = await getMedicalAppointment(petId, medicalAppointmentId);
if (getMedicalAppointmentResult.data) {
    medicalAppointment = getMedicalAppointmentResult.data ?? null;
}

const getDoctorProfilesResult = await getAllProfilesByRoleId(import.meta.env.VETERINARIAN_ROLE_ID, authenticatedUserId);
if (getDoctorProfilesResult.success) {
    doctorProfiles = getDoctorProfilesResult.data;
    doctorProfiles = doctorProfiles.map(dp => ({
            id: dp.id,
            name: `${dp.name} ${dp.lastname} ${dp.me ? '(Tú)' : ''}`,
            me: dp.me,
        }));
}

const profileInputs = [
    {
        id: "name",
        name: "name",
        type: "text",
        autocomplete: "name",
        label: "Nombre",
        value: pet?.name,
    },
    {
        id: "owner",
        name: "owner",
        type: "text",
        autocomplete: "owner",
        label: "Propietario",
        value: pet?.ownerName,
    },
];

const medicalAppointmentInfoInputs = [
    {
        id: "doctor",
        name: "doctor",
        type: "combobox",
        label: "Veterinario",
        value: medicalAppointment ? 
            medicalAppointment?.doctorProfileId.toString()
            : (doctorProfiles && doctorProfiles.length > 0) ? doctorProfiles.find(dp => dp.me === true)?.id.toString() : "",
        options: doctorProfiles ?? [],
    },
    // {
    //     id: "date",
    //     name: "date",
    //     type: "date",
    //     autocomplete: "appointmentDate",
    //     label: "Fecha de la cita",
    //     value: medicalAppointment ? 
    //         medicalAppointment.appointmentDate ? (new Date(medicalAppointment.appointmentDate)).toISOString().split('T')[0] : ""
    //         : new Date().toISOString().split('T')[0],
    // },
];

const medicalAppointmentInputs = [
    [
        {
            id: "weight",
            name: "weight",
            type: "number",
            autocomplete: "weight",
            label: "Peso (kg)",
            value: medicalAppointment?.weight,
        },
        {
            id: "date",
            name: "date",
            type: "date",
            autocomplete: "appointmentDate",
            label: "Fecha de la cita",
            value: medicalAppointment ? 
                medicalAppointment.appointmentDate ? (new Date(medicalAppointment.appointmentDate)).toISOString().split('T')[0] : ""
                : new Date().toISOString().split('T')[0],
        },
    ],
    {
        id: "observations",
        name: "observations",
        label: "Observaciones",
        value: medicalAppointment?.observations,
    },
    {
        id: "prescription",
        name: "prescription",
        label: "Receta / Tratamiento",
        value: medicalAppointment?.prescription,
    },
];

---

<ContentContainer class="h-full">
    <ContentTop backHref={`/app/pets/${petId}/medical-history`}>
        {
            // Main Title
            medicalAppointment ? 
                `Cita médica N° ${medicalAppointment?.appointmentNumber}`
                :
                "Nueva cita médica"
        }
    </ContentTop>
    <GridForm id="medicalappointment-form" lgCols={6} dataset={{ petId: pet?.id, medicalAppointmentId: medicalAppointment?.id }}>
        <!-- Left Side -->
        <div class="lg:col-span-2 flex flex-col gap-6">
            <PetMiniprofileCard pet={pet} />
            <div class="bg-white rounded-xl shadow-lg p-7 text-left">
                <h3 class="font-semibold mb-3">Información de la cita</h3>
                <div class="flex flex-col items-center w-full">
                {
                    medicalAppointmentInfoInputs.map(infoInput => 
                        <DynamicInput {...infoInput} />
                    )
                }
                </div>
            </div>
        </div>

        <!-- Right Card -->
        <SimpleCard lgColSpan="4">
            <h4 class="mb-4">Detalles de la cita</h4>
            {
                medicalAppointmentInputs.map(input => 
                    Array.isArray(input) ?
                    <div class="flex gap-4">
                    {
                        input.map(subinput => 
                            <DynamicInput {...subinput} />
                        )
                    }
                    </div>
                    : 
                    <DynamicInput {...input} />
                )
            }
        </SimpleCard>

        <!-- Action Buttons -->
        <div class="col-span-full flex sm:flex-wrap sm:flex-row sm:justify-end mt-7 gap-4">
            <ActionButton id="submit-button" type="submit" disabled>
                { medicalAppointment ? "Guardar cambios" : "Crear cita médica" }
            </ActionButton>
            { medicalAppointment &&
                <>
                    <ActionButton id="open-delete-dialog-button" type="danger">
                        Eliminar
                    </ActionButton>
                    <DeletePetMedicalAppointmentDialog />
                </>
            }
        </div>
    </GridForm>
</ContentContainer>

<script>
    import { SaveMedicalAppointmentResource } from "@/contexts/medical_histories/server/interfaces/api/resources/save-medical-appointment.resource";
    import { createMedicalAppointment } from "@/contexts/medical_histories/client/usecases/create-medicalappointment.usecase";
    import { updateMedicalAppointment } from "@/contexts/medical_histories/client/usecases/update-medicalappointment.usecase";
    import { FormStateManager } from "@/contexts/_shared/client/utils/form-state-manager";
    import { getFormDataObj } from "@/contexts/_shared/client/presentation/components/forms/form-utils";

    function initializePageScripts() {
        const form = document.getElementById('medicalappointment-form') as HTMLFormElement | null;
        const submitButton = document.getElementById('submit-button') as HTMLButtonElement;

        if (form && submitButton) {
            const formDataObj = getFormDataObj(form);

            const isEditMode = !!formDataObj.medicalAppointmentId;

            if (isEditMode) {
                const formStateManager = new FormStateManager(form, submitButton);
                formStateManager.initialize();
            } else {
                // En modo creación, el botón debe estar habilitado por defecto
                submitButton.disabled = false;
            }

            const weightInput = document.getElementById('weight') as HTMLInputElement;
            // const detailsInput = document.getElementById('details') as HTMLInputElement;
            const observationsInput = document.getElementById('observations') as HTMLInputElement;
            const prescriptionInput = document.getElementById('prescription') as HTMLInputElement;
            const doctorInput = document.getElementById('doctor-value') as HTMLInputElement;
            const dateInput = document.getElementById('date') as HTMLInputElement;
            const formError = document.getElementById('form-error') as HTMLDivElement;
            
            const isNewMedicalAppointment = !formDataObj.medicalAppointmentId;

            const showError = (input: HTMLInputElement, message: string) => {
                const errorContainer = document.getElementById(`${input.id}-error-container`);
                if (errorContainer) {
                    errorContainer.textContent = message;
                }
                // Cambia el color del borde del input a rojo
                input.classList.remove('outline-gray-300', 'focus:outline-blue-800');
                input.classList.add('outline-red-500', 'focus:outline-red-500');
            }

            const clearError = (input: HTMLInputElement) => {
                const errorContainer = document.getElementById(`${input.id}-error-container`);
                if (errorContainer) {
                    errorContainer.textContent = '';
                }
                // Restaura el color del borde del input
                input.classList.remove('outline-red-500', 'focus:outline-red-500');
                input.classList.add('outline-gray-300', 'focus:outline-blue-800');
            }

            form.addEventListener('submit', async (event) => {
                event.preventDefault();

                // Limpia errores previos
                // clearError(detailsInput);
                clearError(observationsInput);
                clearError(prescriptionInput);
                if (formError) {
                    formError.textContent = '';
                }

                const weight = weightInput.value;
                // const details = detailsInput.value;
                const observations = observationsInput.value;
                const prescription = prescriptionInput.value;
                const doctor = doctorInput.value;
                const date = dateInput.value;

                let isValid = true;

                // Validaciones
                if (!weight) {
                    showError(weightInput, 'El peso es obligatorio');
                    isValid = false;
                } else if (isNaN(Number(weight))) {
                    showError(weightInput, 'El peso debe ser un número');
                    isValid = false;
                } else if (Number(weight) <= 0) {
                    showError(weightInput, 'El peso debe ser mayor a 0');
                    isValid = false;
                }

                // if (!details) {
                //     showError(detailsInput, 'Los detalles son obligatorios');
                //     isValid = false;
                // }

                if (!observations) {
                    showError(observationsInput, 'Las observaciones son obligatorias');
                    isValid = false;
                }

                if (!prescription) {
                    showError(prescriptionInput, 'La receta/tratamiento es obligatoria');
                    isValid = false;
                }

                if (!doctor) {
                    showError(document.getElementById('doctor') as HTMLInputElement, 'El veterinario es obligatorio');
                    isValid = false;
                }

                if (!date) {
                    showError(dateInput, 'La fecha de la cita es obligatoria');
                    isValid = false;
                }

                if (isValid) {
                    submitButton.disabled = true;

                    const resource = new SaveMedicalAppointmentResource(Number(weight), /*details, */observations, prescription, new Date(date), doctor ?? 0);

                    if (isNewMedicalAppointment) {
                        submitButton.textContent = 'Creando cita médica...';

                        try {
                            const response = await createMedicalAppointment(formDataObj.petId!, resource);
                            if (response.success) {
                                window.location.href = `/app/pets/${formDataObj.petId!}/medical-history`;
                            } else {
                                formError.textContent = response.errorMessage ?? 'Error al crear cita médica. Por favor, inténtalo de nuevo.';
                            }
                        } catch (error) {
                            console.error('Error al crear cita médica:', error);
                            formError.textContent = 'Error al crear cita médica. Por favor, inténtalo de nuevo.';
                        } finally {
                            submitButton.disabled = false;
                            submitButton.textContent = 'Crear cita médica';
                        }
                    } else {
                        submitButton.textContent = 'Actualizando cita médica...';

                        try {
                            const response = await updateMedicalAppointment(formDataObj.petId!, formDataObj.medicalAppointmentId!, resource);
                            if (response.success) {
                                // window.location.reload();
                                window.location.href = `/app/pets/${formDataObj.petId!}/medical-history`;
                            } else {
                                formError.textContent = response.errorMessage ?? 'Error al actualizar la cita médica. Por favor, inténtalo de nuevo.';
                            }
                        } catch (error) {
                            console.error('Error al actualizar la cita médica:', error);
                            formError.textContent = 'Error al actualizar la cita médica. Por favor, inténtalo de nuevo.';
                        } finally {
                            submitButton.disabled = false;
                            submitButton.textContent = 'Guardar cambios';
                        }
                    }
                }
            });
        }

        // --- Lógica para el botón de eliminar ---
        const openDialogButton = document.getElementById('open-delete-dialog-button');
        // Dialog in delete-pet-dialog.component.astro
        const dialog = document.getElementById('delete-dialog');
        const toggleDialog = (show: boolean) => {
            dialog?.classList.toggle('hidden', !show);
        }

        openDialogButton?.addEventListener('click', () => toggleDialog(true));
    }

    // Ejecuta los scripts en la carga inicial de la página (con View Transitions) 
    // y en cada navegación del lado del cliente.
    document.addEventListener('astro:page-load', initializePageScripts);
</script>