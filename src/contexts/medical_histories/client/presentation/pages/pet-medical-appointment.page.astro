---
import ContentContainer from "@/contexts/_shared/client/presentation/components/content/content-container.component.astro";
import DynamicInput from "@/contexts/_shared/client/presentation/components/inputs/dynamic-input.component.astro";
import DeletePetMedicalAppointmentDialog from "@/contexts/medical_histories/client/presentation/components/delete-pet-medical-appointment-dialog.component.astro";
import { getMedicalAppointment, type MedicalAppointmentInfo } from "@/contexts/medical_histories/server/application/usecases/get-medicalappointment.usecase";
import { getPet } from "@/contexts/pets/server/application/usecases/get-pet.usecase";
import { getAllProfilesByRoleId } from "@/contexts/profiles/server/application/usecases/get-all-profiles-by-role-id.usecase";
import { getAuthenticatedUserIdOrRedirect } from "@/contexts/_shared/server/application/usecases/get-authenticated-user-or-redirect";
import type { PetInfo } from "@/contexts/pets/client/usecases/get-pet.usecase";
import ActionButton from "@/contexts/_shared/client/presentation/components/actions/action-button.component.astro";
import ContentTop from "@/contexts/_shared/client/presentation/components/content/content-top.component.astro";
import GridForm from "@/contexts/_shared/client/presentation/components/forms/grid-form.component.astro";
import PetMiniprofileCard from "@/contexts/pets/client/presentation/components/pet-miniprofile-card.component.astro";
import SimpleCard from "@/contexts/_shared/client/presentation/components/cards/simple-card.component.astro";

/*******************************
 ***** User authentication *****
********************************/
// Probably never redirect from here because it would do so from the middleware
const authenticatedUserId = getAuthenticatedUserIdOrRedirect(Astro);

/****************************
 ***** Page paramenters *****
*****************************/
const { petId, medicalAppointmentId } = Astro.props;

/************************************
 ***** Get info to show on page *****
*************************************/
let pet: PetInfo | null = null;
let medicalAppointment: MedicalAppointmentInfo | null = null;
let doctorProfiles: any[] = [];

const getPetResult = await getPet(petId);
if (getPetResult.success) {
    pet = getPetResult.data ?? null;
}

const getMedicalAppointmentResult = await getMedicalAppointment(petId, medicalAppointmentId);
if (getMedicalAppointmentResult.data) {
    medicalAppointment = getMedicalAppointmentResult.data ?? null;
}

const getDoctorProfilesResult = await getAllProfilesByRoleId(import.meta.env.VETERINARIAN_ROLE_ID, authenticatedUserId);
if (getDoctorProfilesResult.success) {
    doctorProfiles = getDoctorProfilesResult.data;
    doctorProfiles = doctorProfiles.map(dp => ({
            id: dp.id,
            name: `${dp.name} ${dp.lastname} ${dp.me ? '(T√∫)' : ''}`,
            me: dp.me,
        }));
}

/***********************
 ***** Form inputs *****
************************/
const medicalAppointmentInfoInputs = [
    {
        id: "doctor",
        name: "doctor",
        type: "combobox",
        label: "Veterinario",
        value: medicalAppointment ? 
            medicalAppointment?.doctorProfileId.toString()
            : (doctorProfiles && doctorProfiles.length > 0) ? doctorProfiles.find(dp => dp.me === true)?.id.toString() : "",
        options: doctorProfiles ?? [],
        validations: [
            { validate: ((value: any) => !!value).toString(), message: 'El veterinario es obligatorio' }
        ],
        showMandatory: true,
    },
];

const medicalAppointmentInputs = [
    [
        {
            id: "weight",
            name: "weight",
            type: "number",
            autocomplete: "weight",
            label: "Peso (kg)",
            value: medicalAppointment?.weight,
            validations: [
                { validate: ((value: any) => !!value).toString(), message: 'El peso es obligatorio' },
                { validate: ((value: any) => !isNaN(Number(value))).toString(), message: 'El peso debe ser un n√∫mero' },
                { validate: ((value: any) => Number(value) > 0).toString(), message: 'El peso debe ser mayor a 0' }
            ],
            showMandatory: true,
        },
        {
            id: "date",
            name: "date",
            type: "date",
            autocomplete: "appointmentDate",
            label: "Fecha de la cita",
            value: medicalAppointment ? 
                medicalAppointment.appointmentDate ? (new Date(medicalAppointment.appointmentDate)).toISOString().split('T')[0] : ""
                : new Date().toISOString().split('T')[0],
            validations: [
                { validate: ((value: any) => !!value).toString(), message: 'La fecha de la cita es obligatoria' }
            ],
            showMandatory: true,
        },
    ],
    {
        id: "observations",
        name: "observations",
        label: "Observaciones",
        value: medicalAppointment?.observations,
        validations: [
            { validate: ((value: any) => !!value).toString(), message: 'Las observaciones son obligatorias' }
        ],
            showMandatory: true,
    },
    {
        id: "prescription",
        name: "prescription",
        label: "Receta / Tratamiento",
        value: medicalAppointment?.prescription,
        validations: [
            { validate: ((value: any) => !!value).toString(), message: 'La receta/tratamiento es obligatoria' }
        ],
            showMandatory: true,
    },
];

---

<ContentContainer class="h-full">
    <!-- ----------------
    ------ Top bar ------
    ----------------- -->
    <ContentTop backHref={`/app/pets/${petId}/medical-history`}>
        {
            // Main Title
            medicalAppointment ? 
                `Cita m√©dica N¬∞ ${medicalAppointment?.appointmentNumber}`
                :
                "Nueva cita m√©dica"
        }
    </ContentTop>

    <!-- ------------------
    ------ Main form ------
    ------------------- -->
    <!-- (Important to set editMode) -->
    <GridForm id="medicalappointment-form" editMode={!!medicalAppointment} lgCols={6} dataset={{ petId: pet?.id, medicalAppointmentId: medicalAppointment?.id }}>
        <!-- Left Side -->
        <div class="lg:col-span-2 flex flex-col gap-6">

            <!-- ----------------------------------
            ------ üê∂ Pet mini profiled card ------
            ----------------------------------- -->
            <PetMiniprofileCard pet={pet} />
            <div class="bg-white rounded-xl shadow-lg p-7 text-left">
                <h3 class="font-semibold mb-3">Informaci√≥n de la cita</h3>
                <div class="flex flex-col items-center w-full">
                {
                    medicalAppointmentInfoInputs.map(infoInput => 
                        <DynamicInput {...infoInput} />
                    )
                }
                </div>
            </div>
        </div>

        <!-- -----------------------
        ------ Details card ------
        ------------------------ -->
        <SimpleCard lgColSpan="4">
            <h4 class="mb-4">Detalles de la cita</h4>
            {
                medicalAppointmentInputs.map(input => 
                    Array.isArray(input) ?
                    <div class="flex gap-4">
                    {
                        input.map(subinput => 
                            <DynamicInput {...subinput} />
                        )
                    }
                    </div>
                    : 
                    <DynamicInput {...input} />
                )
            }
        </SimpleCard>

        <!-- -----------------------
        ------ Action buttons ------
        ------------------------ -->
        <div class="col-span-full flex sm:flex-wrap sm:flex-row sm:justify-end mt-7 gap-4">
            <ActionButton id="submit-button" type="submit" disabled>
                { medicalAppointment ? "Guardar cambios" : "Crear cita m√©dica" }
            </ActionButton>
            { medicalAppointment &&
                <>
                    <ActionButton id="open-delete-dialog-button" type="danger">
                        Eliminar
                    </ActionButton>
                    <DeletePetMedicalAppointmentDialog />
                </>
            }
        </div>
    </GridForm>
</ContentContainer>

<script>
    import { SaveMedicalAppointmentResource } from "@/contexts/medical_histories/server/interfaces/api/resources/save-medical-appointment.resource";
    import { createMedicalAppointment } from "@/contexts/medical_histories/client/usecases/create-medicalappointment.usecase";
    import { updateMedicalAppointment } from "@/contexts/medical_histories/client/usecases/update-medicalappointment.usecase";

    function initializeForm() {
        const form = document.getElementById('medicalappointment-form') as HTMLFormElement | null;
        if (!form) return;

        /************************
         ***** Submit event *****
        *************************/

        // Before this event, in base-form.astro validations were executed
        form.addEventListener('form:submit', async (event: any) => {
            const { data, submitButton, isEditMode, formDataObj, formError } = event.detail;

            /********************
             ***** Api Call *****
            *********************/

            // If all good, REGISTER/UPDATE
            submitButton.disabled = true;
            submitButton.textContent = !isEditMode ? 'Creando cita m√©dica...' : 'Actualizando cita m√©dica...';

            const resource = new SaveMedicalAppointmentResource(Number(data.weight), data.observations, data.prescription, new Date(data.date), data.doctor ?? 0);
            const actionMessage = !isEditMode ? 'crear' : 'actualizar';
            const badErrorMessage = `Error al ${actionMessage} cita m√©dica. Por favor, int√©ntalo de nuevo.`;

            try {
                const response = !isEditMode ? await createMedicalAppointment(formDataObj.petId!, resource) : 
                                    await updateMedicalAppointment(formDataObj.petId!, formDataObj.medicalAppointmentId!, resource);

                if (response.success) {
                    window.location.href = `/app/pets/${formDataObj.petId!}/medical-history`;
                } else {
                    formError.textContent = response.errorMessage ?? badErrorMessage;
                }
            } catch (error) {
                console.error(`Error al ${actionMessage} cita m√©dica:`, error);
                formError.textContent = badErrorMessage;
            } finally {
                submitButton.disabled = false;
                submitButton.textContent = !isEditMode ? 'Crear cita m√©dica' : 'Guardar cambios';
            }
        });
    }

    function initializeDeleteDialog() {
        /*******************************
         ***** Delete dialog logic *****
        ********************************/

        const openDialogButton = document.getElementById('open-delete-dialog-button');
        const dialog = document.getElementById('delete-dialog');
        const toggleDialog = (show: boolean) => dialog?.classList.toggle('hidden', !show);

        openDialogButton?.addEventListener('click', () => toggleDialog(true));
    }

    /************************************
     ***** Run scripts on page load *****
    *************************************/
    document.addEventListener('astro:page-load', () => {
        initializeForm();
        initializeDeleteDialog();
    });
</script>