---
const { eventTitle } = Astro.props;
const eventId = Astro.url.pathname.split('/').pop(); // A bit hacky, consider passing eventId as prop
---

<div id="delete-dialog" class="hidden fixed inset-0 bg-gray-500/75 overflow-y-auto h-full w-full z-50">
    <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
        <div class="mt-3 text-center">
            <div class="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-red-100">
                <svg class="h-6 w-6 text-red-600" stroke="currentColor" fill="none" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
                </svg>
            </div>
            <h3 class="text-lg leading-6 font-medium text-gray-900">Eliminar evento</h3>
            <div class="mt-2 px-7 py-3">
                <p class="text-sm text-gray-500">
                    ¿Estás seguro de que quieres eliminar el evento {eventTitle}? Una vez que elimines el evento, toda su información se perderá para siempre.
                </p>
            </div>
            <div class="items-center px-4 py-3">
                <button id="delete-confirm-button" class="px-4 py-2 bg-red-500 text-white text-base font-medium rounded-md w-full shadow-sm hover:bg-red-600 focus:outline-none focus:ring-2 focus:ring-red-300">
                    Borrar
                </button>
                <button id="delete-cancel-button" class="px-4 py-2 bg-gray-200 text-gray-800 text-base font-medium rounded-md w-full shadow-sm hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-gray-300 mt-2">
                    Cancelar
                </button>
            </div>
        </div>
    </div>
</div>

<script>
    import { getFormDataObj } from '@/contexts/_shared/client/presentation/components/forms/form-utils';
    import { deleteEvent } from '@/contexts/calendar/client/usecases/delete-event.usecase';

    function initializePageScripts() {
        const form = document.getElementById('event-form') as HTMLFormElement | null;
        const dialog = document.getElementById('delete-dialog');
        const confirmButton = document.getElementById('delete-confirm-button') as HTMLButtonElement;
        const cancelButton = document.getElementById('delete-cancel-button') as HTMLButtonElement;

        const toggleDialog = (show: any) => dialog?.classList.toggle('hidden', !show);

        cancelButton?.addEventListener('click', () => toggleDialog(false));

        confirmButton?.addEventListener('click', async () => {
            const formDataObj = getFormDataObj(form);
            const eventId = formDataObj.petId;
            if (!eventId) return;
            confirmButton.disabled = true;
            confirmButton.textContent = 'Deleting...';

            const result = await deleteEvent(eventId);

            if (result.success) {
                window.location.href = '/app/calendar';
            } else {
                alert(result.errorMessage || 'Failed to delete event.');
                confirmButton.disabled = false;
                confirmButton.textContent = 'Delete';
            }
        });
    }

    
    // Ejecuta los scripts en la carga inicial de la página (con View Transitions) 
    // y en cada navegación del lado del cliente.
    document.addEventListener('astro:page-load', initializePageScripts);
</script>