---
import ContentContainer from "@/contexts/_shared/client/presentation/components/content-container.component.astro";
import DynamicInput from "@/contexts/_shared/client/presentation/components/inputs/dynamic-input.component.astro";
// import BaseTextInput from "@/contexts/_shared/client/presentation/components/base-text-input.component.astro";
import { getEvent, type EventInfo } from "@/contexts/calendar/server/application/usecases/get-event.usecase";
import { getAllPets } from "@/contexts/pets/server/application/usecases/getall-pets.usecase";
import { getAllProfilesByRoleId } from "@/contexts/profiles/server/application/usecases/get-all-profiles-by-role-id.usecase";
import { getAuthenticatedUserIdOrRedirect } from "@/contexts/_shared/server/application/usecases/get-authenticated-user-or-redirect";
import DeleteEventDialog from '@/contexts/calendar/client/presentation/components/delete-event-dialog.component.astro';

const authenticatedUserId = getAuthenticatedUserIdOrRedirect(Astro);
const { eventId } = Astro.props;

let event: EventInfo | null = null;
let pets: any[] = [];
let doctors: any[] = [];

if (eventId) {
    const getEventResult = await getEvent(eventId);
    if (getEventResult.success) {
        event = getEventResult.data ?? null;
    }
}

const getPetsResult = await getAllPets();
if (getPetsResult.success) {
    pets = getPetsResult.data?.map(p => ({ id: p.id, name: p.name })) ?? [];
}

const getDoctorsResult = await getAllProfilesByRoleId(import.meta.env.VETERINARIAN_ROLE_ID, authenticatedUserId);
if (getDoctorsResult.success) {
    doctors = getDoctorsResult.data?.map((d: any) => ({ id: d.id, name: `${d.name} ${d.lastname}` })) ?? [];
}

const detailInputs = [
    {
        id: "title",
        name: "title",
        type: "text",
        label: "Título",
        value: event?.title ?? '',
    },
    {
        id: "petId",
        name: "petId",
        type: "combobox",
        label: "Paciente",
        value: event?.petId?.toString(),
        options: pets,
    },
    {
        id: "doctorProfileId",
        name: "doctorProfileId",
        type: "combobox",
        label: "Veterinario",
        value: event?.doctorProfileId?.toString(),
        options: doctors,
    },
    {
        id: "startDateTime",
        name: "startDateTime",
        type: "datetime-local",
        label: "Inicio",
        value: event?.startDateTime ? new Date(event.startDateTime).toISOString().substring(0, 16) : ''
    },
    {
        id: "endDateTime",
        name: "endDateTime",
        type: "datetime-local",
        label: "Fin",
        value: event?.endDateTime ? new Date(event.endDateTime).toISOString().substring(0, 16) : ''
    },
    {
        id: "description",
        name: "description",
        type: "textarea",
        label: "Descripción",
        value: event?.description ?? '',
    },
];
---

<ContentContainer class="h-full">
    <div class="mb-8 flex items-start gap-4">
        <a href="/app/calendar" class="p-2 rounded-full text-gray-600 hover:bg-gray-200 transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-[#6faab5] -mt-1" aria-label="Back to calendar">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                <path stroke-linecap="round" stroke-linejoin="round" d="M15 19l-7-7 7-7" />
            </svg>
        </a>
        <div>
            <h2 class="text-2xl font-bold leading-tight text-gray-900">
                { event ? "Detalles del evento" : "Nuevo evento" }
            </h2>
            { event && <p class="mt-1 text-md text-gray-600">Revisa y actualiza los detalles del evento.</p> }
        </div>
    </div>

    <form id="event-form" class="bg-white rounded-xl shadow-lg p-8" data-event-id={event?.id} novalidate>
        <div class="grid grid-cols-1 sm:grid-cols-2 gap-x-6 gap-y-4">
            {detailInputs.map(input => <DynamicInput {...input} />)}
        </div>

        <div id="form-error" class="mt-4 text-red-600"></div>

        <div class="mt-8 pt-6 border-t border-gray-200 flex flex-col sm:flex-wrap sm:flex-row sm:justify-end gap-4">
            <button id="submit-button" type="submit" class="rounded-md bg-[#6faab5] px-4 py-2 text-center text-sm font-semibold text-white shadow-sm hover:bg-[#5f9ea8] focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-[#6faab5] cursor-pointer disabled:opacity-50 disabled:cursor-not-allowed">
                { event ? "Guardar cambios" : "Crear evento" }
            </button>
            { event &&
                <>
                    <button id="open-delete-dialog-button" type="button" class="rounded-md bg-red-600 px-4 py-2 text-sm font-semibold text-white shadow-sm hover:bg-red-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-red-600 cursor-pointer">
                        Eliminar
                    </button>
                    <DeleteEventDialog eventTitle={event?.title} />
                </>
            }
        </div>
    </form>
</ContentContainer>

<script>
    import { SaveEventResource } from "@/contexts/calendar/server/interfaces/api/resources/save-event.resource";
    import { createEvent } from "@/contexts/calendar/client/usecases/create-event.usecase";
    import { updateEvent } from "@/contexts/calendar/client/usecases/update-event.usecase";

    function initializePageScripts() {
        const form = document.getElementById('event-form');
        if (!form) return;

        const titleInput = document.getElementById('title') as HTMLInputElement;
        const petIdInput = document.getElementById('petId-value') as HTMLInputElement;
        const doctorProfileIdInput = document.getElementById('doctorProfileId-value') as HTMLInputElement;
        const startDateTimeInput = document.getElementById('startDateTime') as HTMLInputElement;
        const endDateTimeInput = document.getElementById('endDateTime') as HTMLInputElement;
        const descriptionInput = document.getElementById('description') as HTMLInputElement;
        
        const submitButton = document.getElementById('submit-button') as HTMLButtonElement;
        const formError = document.getElementById('form-error') as HTMLDivElement;
        const isNewEvent = !form.dataset.eventId;

        const showError = (input: HTMLInputElement, message: string) => {
            const isHiddenValueInput = input.id.endsWith('-value');
            const baseId = isHiddenValueInput ? input.id.slice(0, -6) : input.id;
            const errorContainer = document.getElementById(`${baseId}-error-container`);
            if (errorContainer) {
                errorContainer.textContent = message;
            }
            const visibleInput = isHiddenValueInput ? document.getElementById(baseId) : input;
            if (visibleInput) {
                visibleInput.classList.remove('outline-gray-300', 'focus:outline-blue-800');
                visibleInput.classList.add('outline-red-500', 'focus:outline-red-500');
            }
        }

        const clearError = (input: HTMLInputElement) => {
            const isHiddenValueInput = input.id.endsWith('-value');
            const baseId = isHiddenValueInput ? input.id.slice(0, -6) : input.id;
            const errorContainer = document.getElementById(`${baseId}-error-container`);
            if (errorContainer) {
                errorContainer.textContent = '';
            }
            const visibleInput = isHiddenValueInput ? document.getElementById(baseId) : input;
            if (visibleInput) {
                visibleInput.classList.remove('outline-red-500', 'focus:outline-red-500');
                visibleInput.classList.add('outline-gray-300', 'focus:outline-blue-800');
            }
        }

        submitButton.addEventListener('click', async (e) => {
        // form.addEventListener('submit', async (e) => {
            e.preventDefault();
            if (submitButton.disabled) return;

            // Clear previous errors
            clearError(titleInput);
            clearError(petIdInput);
            clearError(doctorProfileIdInput);
            clearError(startDateTimeInput);
            clearError(endDateTimeInput);
            if (formError) formError.textContent = '';

            const title = titleInput.value;
            const petId = petIdInput.value;
            const doctorProfileId = doctorProfileIdInput.value;
            const startDateTime = startDateTimeInput.value;
            const endDateTime = endDateTimeInput.value;
            const description = descriptionInput.value;

            let isValid = true;
            if (!title) {
                showError(titleInput, 'Title is required');
                isValid = false;
            }
            if (!petId) {
                showError(petIdInput, 'Pet is required');
                isValid = false;
            }
            if (!doctorProfileId) {
                showError(doctorProfileIdInput, 'Doctor is required');
                isValid = false;
            }
            if (!startDateTime) {
                showError(startDateTimeInput, 'Start time is required');
                isValid = false;
            }
            if (!endDateTime) {
                showError(endDateTimeInput, 'End time is required');
                isValid = false;
            }
            if (startDateTime && endDateTime && new Date(startDateTime) >= new Date(endDateTime)) {
                showError(endDateTimeInput, 'End time must be after start time');
                isValid = false;
            }

            if (!isValid) return;

            submitButton.disabled = true;
            submitButton.textContent = isNewEvent ? 'Creating...' : 'Saving...';

            const resource = new SaveEventResource();
            resource.title = title;
            resource.petId = petId;
            resource.doctorProfileId = doctorProfileId;
            resource.startDateTime = new Date(startDateTime);
            resource.endDateTime = new Date(endDateTime);
            resource.description = description;
            // Assuming a default eventTypeId, or you could add a field for it.
            resource.eventTypeId = 'default-event-type';

            try {
                const response = isNewEvent
                    ? await createEvent(resource)
                    : await updateEvent(form.dataset.eventId!, resource);

                if (response.success) {
                    window.location.href = '/app/calendar';
                } else {
                    formError.textContent = response.errorMessage || 'An error occurred.';
                }
            } catch (error) {
                formError.textContent = 'An unexpected error occurred.';
            } finally {
                submitButton.disabled = false;
                submitButton.textContent = isNewEvent ? 'Crear evento' : 'Guardar cambios';
            }
        });

        // Delete dialog logic
        const openDialogButton = document.getElementById('open-delete-dialog-button');
        const dialog = document.getElementById('delete-dialog');
        const toggleDialog = (show: boolean) => dialog?.classList.toggle('hidden', !show);

        openDialogButton?.addEventListener('click', () => toggleDialog(true));
    }

    document.addEventListener('astro:page-load', initializePageScripts);
</script>