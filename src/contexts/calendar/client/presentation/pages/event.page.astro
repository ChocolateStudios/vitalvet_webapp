---
import ContentContainer from "@/contexts/_shared/client/presentation/components/content/content-container.component.astro";
import DynamicInput from "@/contexts/_shared/client/presentation/components/inputs/dynamic-input.component.astro";
import { getEvent, type EventInfo } from "@/contexts/calendar/server/application/usecases/get-event.usecase";
import { getAllPets } from "@/contexts/pets/server/application/usecases/getall-pets.usecase";
import { getAllProfilesByRoleId } from "@/contexts/profiles/server/application/usecases/get-all-profiles-by-role-id.usecase";
import { getAuthenticatedUserIdOrRedirect } from "@/contexts/_shared/server/application/usecases/get-authenticated-user-or-redirect";
import DeleteEventDialog from '@/contexts/calendar/client/presentation/components/delete-event-dialog.component.astro';
import ActionButton from "@/contexts/_shared/client/presentation/components/actions/action-button.component.astro";
import ContentTop from "@/contexts/_shared/client/presentation/components/content/content-top.component.astro";
import GridForm from "@/contexts/_shared/client/presentation/components/forms/grid-form.component.astro";
import SimpleCard from "@/contexts/_shared/client/presentation/components/cards/simple-card.component.astro";

const authenticatedUserId = getAuthenticatedUserIdOrRedirect(Astro);
const { eventId } = Astro.props;

let event: EventInfo | null = null;
let pets: any[] = [];
let doctors: any[] = [];

if (eventId) {
    const getEventResult = await getEvent(eventId);
    if (getEventResult.success) {
        event = getEventResult.data ?? null;
    }
}

const getPetsResult = await getAllPets();
if (getPetsResult.success) {
    pets = getPetsResult.data?.map(p => ({ id: p.id, name: p.name })) ?? [];
}

const getDoctorsResult = await getAllProfilesByRoleId(import.meta.env.VETERINARIAN_ROLE_ID, authenticatedUserId);
if (getDoctorsResult.success) {
    doctors = getDoctorsResult.data?.map((d: any) => ({ id: d.id, name: `${d.name} ${d.lastname}` })) ?? [];
}

const eventInputs = [
    {
        id: "title",
        name: "title",
        type: "text",
        label: "Título",
        value: event?.title ?? '',
    },
    {
        id: "petId",
        name: "petId",
        type: "combobox",
        label: "Paciente",
        value: event?.petId?.toString(),
        options: pets,
    },
    {
        id: "doctorProfileId",
        name: "doctorProfileId",
        type: "combobox",
        label: "Veterinario",
        value: event?.doctorProfileId?.toString(),
        options: doctors,
    },
    {
        id: "startDateTime",
        name: "startDateTime",
        type: "datetime-local",
        label: "Inicio",
        value: event?.startDateTime ? new Date(event.startDateTime).toISOString().substring(0, 16) : ''
    },
    {
        id: "endDateTime",
        name: "endDateTime",
        type: "datetime-local",
        label: "Fin",
        value: event?.endDateTime ? new Date(event.endDateTime).toISOString().substring(0, 16) : ''
    },
    {
        id: "description",
        name: "description",
        type: "textarea",
        label: "Descripción",
        value: event?.description ?? '',
    },
];
---

<ContentContainer class="h-full">
    <ContentTop backHref="/app/calendar">
        { event ? "Detalles del evento" : "Nuevo evento" }
        { event && 
            <p slot="subtitle" class="mt-1 text-md text-gray-600">
                Revisa y actualiza los detalles del evento.
            </p> 
        }
    </ContentTop>

    <GridForm id="event-form" dataset={{ eventId: event?.id }}>
        <SimpleCard>
            <div class="grid grid-cols-1 sm:grid-cols-2 gap-x-6 gap-y-4">
                {eventInputs.map(input => <DynamicInput {...input} />)}
            </div>

            <div id="form-error" class="mt-4 text-red-600"></div>

            <!-- Action Buttons -->
            <div class="mt-8 pt-6 border-t border-gray-200 flex flex-col sm:flex-wrap sm:flex-row sm:justify-end gap-4">
                <ActionButton id="submit-button" type="submit">
                    { event ? "Guardar cambios" : "Crear evento" }
                </ActionButton>
                { event &&
                    <>
                        <ActionButton id="open-delete-dialog-button" type="danger">
                            Eliminar
                        </ActionButton>
                        <DeleteEventDialog eventTitle={event?.title} />
                    </>
                }
            </div>
        </SimpleCard>
    </GridForm>
</ContentContainer>

<script>
    import { SaveEventResource } from "@/contexts/calendar/server/interfaces/api/resources/save-event.resource";
    import { createEvent } from "@/contexts/calendar/client/usecases/create-event.usecase";
    import { updateEvent } from "@/contexts/calendar/client/usecases/update-event.usecase";
    import { FormStateManager } from "@/contexts/_shared/client/utils/form-state-manager";
    import { clearError, getFormDataObj, showError } from "@/contexts/_shared/client/presentation/components/forms/form-utils";

    function initializePageScripts() {
        const form = document.getElementById('event-form') as HTMLFormElement;
        const submitButton = document.getElementById('submit-button') as HTMLButtonElement;
        if (!form || !submitButton) return;

        const formDataObj = getFormDataObj(form);

        const isEditMode = !!formDataObj.eventId;

        if (isEditMode) {
            const formStateManager = new FormStateManager(form, submitButton);
            formStateManager.initialize();
        } else {
            // En modo creación, el botón debe estar habilitado por defecto
            submitButton.disabled = false;
        }

        const titleInput = document.getElementById('title') as HTMLInputElement;
        const petIdInput = document.getElementById('petId-value') as HTMLInputElement;
        const doctorProfileIdInput = document.getElementById('doctorProfileId-value') as HTMLInputElement;
        const startDateTimeInput = document.getElementById('startDateTime') as HTMLInputElement;
        const endDateTimeInput = document.getElementById('endDateTime') as HTMLInputElement;
        const descriptionInput = document.getElementById('description') as HTMLInputElement;
        
        const formError = document.getElementById('form-error') as HTMLDivElement;
        const isNewEvent = !formDataObj.eventId;

        submitButton.addEventListener('click', async (e) => {
        // form.addEventListener('submit', async (e) => {
            e.preventDefault();
            if (submitButton.disabled) return;

            // Clear previous errors
            clearError(titleInput);
            clearError(petIdInput);
            clearError(doctorProfileIdInput);
            clearError(startDateTimeInput);
            clearError(endDateTimeInput);
            if (formError) formError.textContent = '';

            const title = titleInput.value;
            const petId = petIdInput.value;
            const doctorProfileId = doctorProfileIdInput.value;
            const startDateTime = startDateTimeInput.value;
            const endDateTime = endDateTimeInput.value;
            const description = descriptionInput.value;

            let isValid = true;
            if (!title) {
                showError(titleInput, 'El título es obligatorio');
                isValid = false;
            }
            if (!petId) {
                showError(petIdInput, 'El paciente es obligatorio');
                isValid = false;
            }
            if (!doctorProfileId) {
                showError(doctorProfileIdInput, 'El veterinario es obligatorio');
                isValid = false;
            }
            if (!startDateTime) {
                showError(startDateTimeInput, 'La fecha y hora de inicio son obligatorias');
                isValid = false;
            }
            if (!endDateTime) {
                showError(endDateTimeInput, 'La fecha y hora de fin son obligatorias');
                isValid = false;
            }
            if (startDateTime && endDateTime && new Date(startDateTime) >= new Date(endDateTime)) {
                showError(endDateTimeInput, 'La fecha y hora de fin debe ser posterior a la fecha y hora de inicio');
                isValid = false;
            }

            if (!isValid) return;

            submitButton.disabled = true;
            submitButton.textContent = isNewEvent ? 'Creando evento...' : 'Actualizando evento...';

            const resource = new SaveEventResource(title, new Date(startDateTime), new Date(endDateTime), description, doctorProfileId, petId, 'default-event-type');

            try {
                const response = isNewEvent
                    ? await createEvent(resource)
                    : await updateEvent(formDataObj.eventId!, resource);

                if (response.success) {
                    window.location.href = '/app/calendar';
                } else {
                    formError.textContent = response.errorMessage || 'Ha ocurrido un error. Por favor, inténtalo de nuevo.';
                }
            } catch (error) {
                formError.textContent = 'Ha ocurrido un error. Por favor, inténtalo de nuevo.';
            } finally {
                submitButton.disabled = false;
                submitButton.textContent = isNewEvent ? 'Crear evento' : 'Guardar cambios';
            }
        });

        // Delete dialog logic
        const openDialogButton = document.getElementById('open-delete-dialog-button');
        const dialog = document.getElementById('delete-dialog');
        const toggleDialog = (show: boolean) => dialog?.classList.toggle('hidden', !show);

        openDialogButton?.addEventListener('click', () => toggleDialog(true));
    }

    document.addEventListener('astro:page-load', initializePageScripts);
</script>