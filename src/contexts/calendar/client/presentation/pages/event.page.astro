---
import ContentContainer from "@/contexts/_shared/client/presentation/components/content/content-container.component.astro";
import DynamicInput from "@/contexts/_shared/client/presentation/components/inputs/dynamic-input.component.astro";
import { getEvent, type EventInfo } from "@/contexts/calendar/server/application/usecases/get-event.usecase";
import { getAllPets } from "@/contexts/pets/server/application/usecases/getall-pets.usecase";
import { getAllProfilesByRoleId } from "@/contexts/profiles/server/application/usecases/get-all-profiles-by-role-id.usecase";
import { getAuthenticatedUserIdOrRedirect } from "@/contexts/_shared/server/application/usecases/get-authenticated-user-or-redirect";
import DeleteEventDialog from '@/contexts/calendar/client/presentation/components/delete-event-dialog.component.astro';
import ActionButton from "@/contexts/_shared/client/presentation/components/actions/action-button.component.astro";
import ContentTop from "@/contexts/_shared/client/presentation/components/content/content-top.component.astro";
import GridForm from "@/contexts/_shared/client/presentation/components/forms/grid-form.component.astro";
import SimpleCard from "@/contexts/_shared/client/presentation/components/cards/simple-card.component.astro";

/*******************************
 ***** User authentication *****
********************************/
// Probably never redirect from here because it would do so from the middleware
const authenticatedUserId = getAuthenticatedUserIdOrRedirect(Astro);

/****************************
 ***** Page paramenters *****
*****************************/
const { eventId } = Astro.props;

/************************************
 ***** Get info to show on page *****
*************************************/
let event: EventInfo | null = null;
let pets: any[] = [];
let doctors: any[] = [];

if (eventId) {
    const getEventResult = await getEvent(eventId);
    if (getEventResult.success) {
        event = getEventResult.data ?? null;
    }
}

const getPetsResult = await getAllPets();
if (getPetsResult.success) {
    pets = getPetsResult.data?.map(p => ({ id: p.id, name: p.name })) ?? [];
}

const getDoctorsResult = await getAllProfilesByRoleId(import.meta.env.VETERINARIAN_ROLE_ID, authenticatedUserId);
if (getDoctorsResult.success) {
    doctors = getDoctorsResult.data?.map((d: any) => ({ id: d.id, name: `${d.name} ${d.lastname}` })) ?? [];
}

/***********************
 ***** Form inputs *****
************************/
const eventInputs = [
    {
        id: "title",
        name: "title",
        type: "text",
        label: "Título",
        value: event?.title ?? '',
        validations: [
            { validate: ((value: any) => !!value).toString(), message: 'El título es obligatorio' }
        ],
    },
    {
        id: "petId",
        name: "petId",
        type: "combobox",
        label: "Paciente",
        value: event?.petId?.toString(),
        options: pets,
        validations: [
            { validate: ((value: any) => !!value).toString(), message: 'El paciente es obligatorio' }
        ],
    },
    {
        id: "doctorProfileId",
        name: "doctorProfileId",
        type: "combobox",
        label: "Veterinario",
        value: event?.doctorProfileId?.toString(),
        options: doctors,
        validations: [
            { validate: ((value: any) => !!value).toString(), message: 'El veterinario es obligatorio' }
        ],
    },
    {
        id: "startDateTime",
        name: "startDateTime",
        type: "datetime-local",
        label: "Inicio",
        value: event?.startDateTime ? new Date(event.startDateTime).toISOString().substring(0, 16) : '',
        validations: [
            { validate: ((value: any) => !!value).toString(), message: 'La fecha de inicio es obligatoria' }
        ],
    },
    {
        id: "endDateTime",
        name: "endDateTime",
        type: "datetime-local",
        label: "Fin",
        value: event?.endDateTime ? new Date(event.endDateTime).toISOString().substring(0, 16) : '',
        validations: [
            { validate: ((value: any) => !!value).toString(), message: 'La fecha de fin es obligatoria' }
        ],
    },
    {
        id: "description",
        name: "description",
        type: "textarea",
        label: "Descripción",
        value: event?.description ?? '',
        validations: [
            { validate: ((value: any) => !!value).toString(), message: 'La descripción es obligatoria' }
        ],
    },
];
---

<ContentContainer class="h-full">
    <!-- ----------------
    ------ Top bar ------
    ----------------- -->
    <ContentTop backHref="/app/calendar">
        { event ? "Detalles del evento" : "Nuevo evento" }
        { event && 
            <p slot="subtitle" class="mt-1 text-md text-gray-600">
                Revisa y actualiza los detalles del evento.
            </p> 
        }
    </ContentTop>

    <!-- ------------------
    ------ Main form ------
    ------------------- -->
    <!-- (Important to set editMode) -->
    <GridForm id="event-form" editMode={!!event} dataset={{ eventId: event?.id }}>
        <SimpleCard>
            <div class="grid grid-cols-1 sm:grid-cols-2 gap-x-6 gap-y-4">
                {eventInputs.map(input => <DynamicInput {...input} />)}
            </div>

            <div id="form-error" class="mt-4 text-red-600"></div>

            <!-- -----------------------
            ------ Action buttons ------
            ------------------------ -->
            <div class="mt-8 pt-6 border-t border-gray-200 flex flex-col sm:flex-wrap sm:flex-row sm:justify-end gap-4">
                <ActionButton id="submit-button" type="submit">
                    { event ? "Guardar cambios" : "Crear evento" }
                </ActionButton>
                { event &&
                    <>
                        <ActionButton id="open-delete-dialog-button" type="danger">
                            Eliminar
                        </ActionButton>
                        <DeleteEventDialog eventTitle={event?.title} />
                    </>
                }
            </div>
        </SimpleCard>
    </GridForm>
</ContentContainer>

<script>
    import { SaveEventResource } from "@/contexts/calendar/server/interfaces/api/resources/save-event.resource";
    import { createEvent } from "@/contexts/calendar/client/usecases/create-event.usecase";
    import { updateEvent } from "@/contexts/calendar/client/usecases/update-event.usecase";

    function initializeForm() {
        const form = document.getElementById('event-form') as HTMLFormElement;
        if (!form) return;

        /************************
         ***** Submit event *****
        *************************/

        // Before this event, in base-form.astro validations were executed
        form.addEventListener('form:submit', async (event: any) => {
            const { data, submitButton, isEditMode, formDataObj, formError } = event.detail;

            /********************
             ***** Api Call *****
            *********************/

            // If all good, REGISTER/UPDATE
            submitButton.disabled = true;
            submitButton.textContent = !isEditMode ? 'Creando evento...' : 'Actualizando evento...';

            const resource = new SaveEventResource(data.title, new Date(data.startDateTime), new Date(data.endDateTime), data.description, data.doctorProfileId, data.petId, 'default-event-type');
            const actionMessage = !isEditMode ? 'crear' : 'actualizar';
            const badErrorMessage = `Error al ${actionMessage} evento. Por favor, inténtalo de nuevo.`;

            try {
                const response = !isEditMode
                    ? await createEvent(resource)
                    : await updateEvent(formDataObj.eventId!, resource);

                if (response.success) {
                    window.location.href = '/app/calendar';
                } else {
                    formError.textContent = response.errorMessage || badErrorMessage;
                }
            } catch (error) {
                console.error(`Error al ${actionMessage} evento:`, error);
                formError.textContent = badErrorMessage;
            } finally {
                submitButton.disabled = false;
                submitButton.textContent = !isEditMode ? 'Crear evento' : 'Guardar cambios';
            }
        });;
    }

    function initializeDeleteDialog() {
        /*******************************
         ***** Delete dialog logic *****
        ********************************/

        const openDialogButton = document.getElementById('open-delete-dialog-button');
        const dialog = document.getElementById('delete-dialog');
        const toggleDialog = (show: boolean) => dialog?.classList.toggle('hidden', !show);

        openDialogButton?.addEventListener('click', () => toggleDialog(true));
    }

    /************************************
     ***** Run scripts on page load *****
    *************************************/
    document.addEventListener('astro:page-load', () => {
        initializeForm();
        initializeDeleteDialog();
    });
</script>