---
import petProfilePhoto from "@/assets/petProfilePhoto.png";
import { getPet } from "@/contexts/pets/server/application/usecases/get-pet.usecase";
import ContentContainer from "@/contexts/_shared/client/presentation/components/content/content-container.component.astro";
import DynamicInput from "@/contexts/_shared/client/presentation/components/inputs/dynamic-input.component.astro";
import DeletePetDialog from "@/contexts/pets/client/presentation/components/delete-pet-dialog.component.astro";
import EditIcon from "@/contexts/_shared/client/presentation/components/icons/EditIcon.astro";
import { PetStatus } from "@/contexts/pets/server/models/pet-status.enum";
import type { PetInfo } from "@/contexts/pets/client/usecases/get-pet.usecase";
import { getAllProfilesByRoleId } from "@/contexts/profiles/server/application/usecases/get-all-profiles-by-role-id.usecase";
import { getAuthenticatedUserIdOrRedirect } from "@/contexts/_shared/server/application/usecases/get-authenticated-user-or-redirect";
import ModalManager from "@/contexts/_shared/client/presentation/components/modal-manager.component.astro";
import PetOwnerModal from "@/contexts/pets/client/presentation/components/petowner-modal.component.astro";
import { getAllSpecies, getAllSubspecies } from "@/contexts/pets/server/application/usecases/getall-species-subspecies.usecase";
import SpeciesModal from "@/contexts/pets/client/presentation/components/species-modal.component.astro";
import SubspeciesModal from "@/contexts/pets/client/presentation/components/subspecies-modal.component.astro";
import ActionButton from "@/contexts/_shared/client/presentation/components/actions/action-button.component.astro";
import ActionLink from "@/contexts/_shared/client/presentation/components/actions/action-link.component.astro";
import ContentTop from "@/contexts/_shared/client/presentation/components/content/content-top.component.astro";
import GridForm from "@/contexts/_shared/client/presentation/components/forms/grid-form.component.astro";
import SimpleCard from "@/contexts/_shared/client/presentation/components/cards/simple-card.component.astro";

/*******************************
 ***** User authentication *****
********************************/
// Probably never redirect from here because it would do so from the middleware
const authenticatedUserId = getAuthenticatedUserIdOrRedirect(Astro);

/****************************
 ***** Page paramenters *****
*****************************/
const { petId } = Astro.props;

/************************************
 ***** Get info to show on page *****
*************************************/
let pet: PetInfo | null = null;
let ownerProfiles: any[] = [];
let allSpecies: any[] = [];
let allSubspecies: any[] = [];

const getPetResult = await getPet(petId);
if (getPetResult.success) {
    pet = getPetResult.data ?? null;
}

const getOwnerProfilesResult = await getAllProfilesByRoleId(import.meta.env.OWNER_ROLE_ID, authenticatedUserId);
if (getOwnerProfilesResult.success) {
    ownerProfiles = getOwnerProfilesResult.data;
    ownerProfiles = ownerProfiles.map(op => ({
            id: op.id,
            name: `${op.name} ${op.lastname} ${op.me ? '(Tú)' : ''}`,
            me: op.me,
        }));
}

const getSpeciesResult = await getAllSpecies();
if (getSpeciesResult.success) {
    allSpecies = getSpeciesResult.data ?? [];
}
const getSubspeciesResult = await getAllSubspecies();
if (getSubspeciesResult.success) {
    allSubspecies = getSubspeciesResult.data ?? [];
}

/***********************
 ***** Form inputs *****
************************/
const profileInput = {
    id: "name",
    name: "name",
    type: "text",
    autocomplete: "name",
    label: "Nombre",
    value: pet?.name,
    validations: [
        { validate: ((value: any) => !!value).toString(), message: 'El nombre es obligatorio' },
        { validate: ((value: any) => value.length >= 3).toString(), message: 'El nombre debe tener al menos 3 caracteres' }
    ],
    showMandatory: true,
};

const detailInputs = [
    {
        id: "owner",
        name: "owner",
        type: "combobox",
        label: "Dueño",
        value: pet ? 
            pet?.ownerProfileId.toString()
            : (ownerProfiles && ownerProfiles.length > 0) ? ownerProfiles.find(op => op.me === true)?.id.toString() : "",
        options: ownerProfiles ?? [],
        actions: [
            {
                label: `<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 inline-block mr-2" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clip-rule="evenodd" /></svg>Agregar nuevo dueño`,
                onClick: "document.dispatchEvent(new CustomEvent('open-modal', { detail: { id: 'petowner-modal' } }))"
            }
        ],
        validations: [
            { validate: ((value: any) => !!value).toString(), message: 'El dueño es obligatorio' }
        ],
        showMandatory: true,
    },
    {
        id: "birthday",
        name: "birthday",
        type: "date",
        autocomplete: "birthday",
        label: "Fecha de nacimiento",
        value: pet?.birthday ? (new Date(pet.birthday)).toISOString().split('T')[0] : "",
        validations: [
            { validate: ((value: any) => !!value).toString(), message: 'La fecha de nacimiento es obligatoria' }
        ],
        showMandatory: true,
    },
    {
        id: "species",
        name: "species",
        type: "combobox",
        label: "Especie",
        value: (allSubspecies.find(ss => ss.id === pet?.subspeciesId)?.speciesId?.toString()),
        options: allSpecies ?? [],
        actions: [
            {
                label: `<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 inline-block mr-2" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clip-rule="evenodd" /></svg>Agregar nueva especie`,
                onClick: "document.dispatchEvent(new CustomEvent('open-modal', { detail: { id: 'species-modal' } }))"
            }
        ],
        validations: [
            { validate: ((value: any) => !!value).toString(), message: 'La especie es obligatoria' }
        ],
        showMandatory: true,
    },
    {
        id: "subspecies",
        name: "subspecies",
        type: "combobox",
        label: "Raza",
        value: pet?.subspeciesId?.toString(),
        options: allSubspecies ?? [],
        actions: [
            {
                label: `<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 inline-block mr-2" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clip-rule="evenodd" /></svg>Agregar nueva raza`,
                onClick: "document.dispatchEvent(new CustomEvent('open-modal', { detail: { id: 'subspecies-modal' } }))"
            }
        ],
        validations: [
            { validate: ((value: any) => !!value).toString(), message: 'La raza es obligatoria' }
        ],
        showMandatory: true,
    },
    {
        id: "age",
        name: "age",
        type: "text",
        autocomplete: "age",
        label: "Edad (años)",
        value: pet?.birthday ? (() => {
            const birthDate = new Date(pet.birthday);
            const today = new Date();
            let age = today.getFullYear() - birthDate.getFullYear();
            const m = today.getMonth() - birthDate.getMonth();
            if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {
                age--;
            }
            return age;
        })() : "",
        readonly: true,
        tooltip: "La edad se autocalcula según la fecha de nacimiento.",
    },
    {
        id: "weight",
        name: "weight",
        type: "number",
        autocomplete: "weight",
        label: "Peso (kg)",
        value:  (pet && pet?.medicalAppointmentsCount > 0) ? pet?.weight : "",
        readonly: true,
        tooltip: (pet && pet?.medicalAppointmentsCount > 0) ? "El peso se obtuvo de la última cita médica." : "El peso se obtendrá cuando se registre la primera cita médica.",
    },
    {
        id: "status",
        name: "status",
        type: "switch",
        trueLabel: "Activo",
        falseLabel: "Inactivo",
        value:  pet?.status === PetStatus.Inactive ? PetStatus.Inactive : PetStatus.Active,
        trueValue: PetStatus.Active,
        falseValue: PetStatus.Inactive,
        trueTooltip: "El estado actual de la mascota indica que sigue con vida.",
        falseTooltip: "El estado actual de la mascota indica que ha fallecido.",
    },
];

---

<ContentContainer class="h-full">
    <!-- ----------------
    ------ Top bar ------
    ----------------- -->
    <ContentTop backHref="/app/home">
        { pet ? "Datos de la mascota" : "Nueva mascota" }  <!-- Main Title -->
        { pet && 
            <p slot="subtitle" class="mt-1 text-md text-gray-600">
                Revisa y actualiza la información de {pet.name}.
            </p> 
        }
    </ContentTop>

    <!-- ------------------
    ------ Main form ------
    ------------------- -->
    <!-- (Important to set editMode) -->
    <GridForm id="pet-form" editMode={!!pet} lgCols={5} dataset={{ petId: pet?.id }}>

        <!-- -----------------------
        ------ Profile card ------
        ------------------------ -->
        <SimpleCard lgColSpan="2" class="flex flex-col items-center text-center" transition:name={pet ? `pet-profile-${pet.id}`: ''}>
            <div class="relative w-40 h-40 mb-6">
                <img 
                    src={petProfilePhoto.src} 
                    alt={`Foto de ${pet?.name || 'mascota'}`} 
                    class="rounded-full w-40 h-40 object-cover border-4 border-white shadow-md"
                />
                <button type="button" aria-label="Cambiar foto" class="absolute bottom-0 right-0 bg-[#6faab5] text-white rounded-full p-2 hover:bg-[#5f9ea8] focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-[#6faab5]">
                    <EditIcon />
                </button>
            </div>
            <DynamicInput {...profileInput} class="w-full" />
        </SimpleCard>

        <!-- -----------------------
        ------ Details card ------
        ------------------------ -->
        <SimpleCard lgColSpan="3">
            <h3 class="text-xl font-bold text-gray-800 mb-6 border-b pb-4">Información detallada</h3>
            <div class="grid grid-cols-1 sm:grid-cols-2 gap-x-6 gap-y-4">
            {
                detailInputs.map(input => {
                    return <DynamicInput {...input as any} />;
                })
            }
            </div>

            <!-- -----------------------
            ------ Action buttons ------
            ------------------------ -->
            <div class="mt-8 pt-6 border-t border-gray-200 flex flex-col sm:flex-wrap sm:flex-row sm:justify-end gap-4">
                { pet &&
                    <>
                        <ActionLink href={`/app/pets/${petId}/baths-history`}>
                            Baños {pet?.bathsCount > 0 ? `(${pet?.bathsCount})` : ''}
                        </ActionLink>
                        <ActionLink href={`/app/pets/${petId}/medical-history`}>
                            Historial médico {pet?.medicalAppointmentsCount > 0 ? `(${pet?.medicalAppointmentsCount})` : ''}
                        </ActionLink>
                    </>
                }
                <ActionButton id="submit-button" type="submit" disabled>
                    { pet ? "Guardar cambios" : "Crear mascota" }
                </ActionButton>
                { pet &&
                    <>
                        <ActionButton id="open-delete-dialog-button" type="danger">
                            Eliminar
                        </ActionButton>
                        <DeletePetDialog petName={pet?.name} />
                    </>
                }
            </div>
        </SimpleCard>
    </GridForm>
    
    <!-- Modals -->
    <PetOwnerModal />
    <SpeciesModal />
    <SubspeciesModal {allSpecies} />
    <ModalManager />
</ContentContainer>

<script>
    import { SavePetResource } from "@/contexts/pets/server/interfaces/api/resources/save-pet.resource";
    import { createPet } from "@/contexts/pets/client/usecases/create-pet.usecase";
    import { updatePet } from "@/contexts/pets/client/usecases/update-pet.usecase";

    declare global {
        interface Window {
            listenersInitialized?: boolean;
        }
    }
    function initializeForm() {
        const form = document.getElementById('pet-form') as HTMLFormElement | null;
        if (!form) return;

        /*************************************************************
         ***** Calculate and insert years based on date of birth *****
        **************************************************************/
        const birthdayInput = document.getElementById('birthday') as HTMLInputElement;
        const petAgeInput = document.getElementById('age') as HTMLInputElement;

        if (birthdayInput && petAgeInput) {
            birthdayInput.addEventListener('input', () => {
                const birthDateString = birthdayInput.value;
                if (birthDateString) {
                    // The browser usually returns YYYY-MM-DD. Appending T00:00:00 ensures it's parsed in the local timezone
                    // and avoids potential off-by-one day errors due to UTC conversion.
                    const birthDate = new Date(`${birthDateString}T00:00:00`);
                    const today = new Date();
                    
                    // Set hours to 0 to compare dates only
                    today.setHours(0, 0, 0, 0);

                    if (!isNaN(birthDate.getTime()) && birthDate <= today) {
                        let age = today.getFullYear() - birthDate.getFullYear();
                        const m = today.getMonth() - birthDate.getMonth();
                        if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {
                            age--;
                        }
                        petAgeInput.value = age.toString();
                    } else {
                        petAgeInput.value = '';
                    }
                } else {
                    petAgeInput.value = '';
                }
            });
        }
        
        /************************
         ***** Submit event *****
        *************************/

        // Before this event, in base-form.astro validations were executed
        form.addEventListener('form:submit', async (event: any) => {
            const { data, submitButton, isEditMode, formDataObj, formError } = event.detail;
        
            /********************
             ***** Api Call *****
            *********************/

            // If all good, REGISTER/UPDATE
            submitButton.disabled = true;
            submitButton.textContent = !isEditMode ? 'Creando mascota...'  : 'Actualizando mascota...';

            const resource = new SavePetResource(data.name, "", new Date(data.birthday), data.status, data.owner ?? 0, data.subspecies ?? 0);
            const actionMessage = !isEditMode ? 'crear' : 'actualizar';
            const badErrorMessage = `Error al ${actionMessage} mascota. Por favor, inténtalo de nuevo.`;

            try {
                const response = !isEditMode ? await createPet(resource) : await updatePet(formDataObj.petId!, resource);

                if (response.success) {
                    window.location.href = '/app/home';
                } else {
                    formError.textContent = response.errorMessage ?? badErrorMessage;
                }
            } catch (error) {
                console.error(`Error al ${actionMessage} mascota:`, error);
                formError.textContent = badErrorMessage;
            } finally {
                submitButton.disabled = false;
                submitButton.textContent = !isEditMode ? 'Crear mascota' : 'Guardar cambios';
            }
        });
    }

    function initializeDeleteDialog() {
        /*******************************
         ***** Delete dialog logic *****
        ********************************/

        const openDialogButton = document.getElementById('open-delete-dialog-button');
        const dialog = document.getElementById('delete-dialog');
        const toggleDialog = (show: boolean) => dialog?.classList.toggle('hidden', !show);

        openDialogButton?.addEventListener('click', () => toggleDialog(true));
    }

    function initializeListeners() {
        // Evita añadir el listener múltiples veces con Astro View Transitions
        if (window.listenersInitialized) return;
        window.listenersInitialized = true;

        document.addEventListener('owner-created', (e) => {
            const event = e as CustomEvent;
            const newOwner = event.detail.newOwner;

            // Busca la instancia del combobox de dueños
            const ownerCombobox = window.comboboxInstances?.['owner'];

            if (ownerCombobox && newOwner) {
                // Prepara la nueva opción para el combobox
                const newOption = {
                    id: newOwner.id,
                    name: `${newOwner.name} ${newOwner.lastname}`
                };
                // Llama al nuevo método para añadir y seleccionar la opción
                ownerCombobox.addOptionAndSelect(newOption);
            }
        });

        document.addEventListener('species-created', (e) => {
            const event = e as CustomEvent;
            const newSpecies = event.detail.newSpecies;

            // Busca la instancia del combobox de especies
            const speciesCombobox = window.comboboxInstances?.['species'];

            if (speciesCombobox && newSpecies) {
                // Prepara la nueva opción para el combobox
                const newOption = {
                    id: newSpecies.id,
                    name: `${newSpecies.name}`
                };
                // Llama al nuevo método para añadir y seleccionar la opción
                speciesCombobox.addOptionAndSelect(newOption);
            }
        });

        document.addEventListener('subspecies-created', (e) => {
            const event = e as CustomEvent;
            const newSubspecies = event.detail.newSubspecies;

            // Busca la instancia del combobox de subspecies
            const subspeciesCombobox = window.comboboxInstances?.['subspecies'];

            if (subspeciesCombobox && newSubspecies) {
                // Prepara la nueva opción para el combobox
                const newOption = {
                    id: newSubspecies.id,
                    name: `${newSubspecies.name}`
                };
                // Llama al nuevo método para añadir y seleccionar la opción
                subspeciesCombobox.addOptionAndSelect(newOption);
            }
        });
    }

    /************************************
     ***** Run scripts on page load *****
    *************************************/
    document.addEventListener('astro:page-load', () => {
        initializeForm();
        initializeDeleteDialog();
        initializeListeners();
    });

</script>