---
import petProfilePhoto from "@/assets/petProfilePhoto.png";
import { getPet } from "@/contexts/pets/server/application/usecases/get-pet.usecase";
import ContentContainer from "@/contexts/_shared/client/presentation/components/content-container.component.astro";
import BaseTextInput from "@/contexts/_shared/client/presentation/components/base-text-input.component.astro";
import BaseSwitch from "@/contexts/_shared/client/presentation/components/base-switch.component.astro";
import DeletePetDialog from "@/contexts/pets/client/presentation/components/delete-pet-dialog.component.astro";
import EditIcon from "@/contexts/_shared/client/presentation/components/icons/EditIcon.astro";
import { PetStatus } from "@/contexts/pets/server/models/pet-status.enum";
import type { PetInfo } from "@/contexts/pets/client/usecases/get-pet.usecase";
import { getAllProfilesByRoleId } from "@/contexts/profiles/server/application/usecases/get-all-profiles-by-role-id.usecase";
import { getAuthenticatedUserIdOrRedirect } from "@/contexts/_shared/server/application/usecases/get-authenticated-user-or-redirect";
import BaseCombobox, { type Props as ComboboxProps } from "@/contexts/_shared/client/presentation/components/base-combobox.component.astro";
import ModalManager from "@/contexts/_shared/client/presentation/components/modal-manager.component.astro";
import PetOwnerModal from "@/contexts/pets/client/presentation/components/petowner-modal.component.astro";
import { getAllSpecies, getAllSubspecies } from "@/contexts/pets/server/application/usecases/getall-species-subspecies.usecase";
import SpeciesModal from "@/contexts/pets/client/presentation/components/species-modal.component.astro";
import SubspeciesModal from "@/contexts/pets/client/presentation/components/subspecies-modal.component.astro";

const authenticatedUserId = getAuthenticatedUserIdOrRedirect(Astro);

const { petId } = Astro.props;

let pet: PetInfo | null = null;
let ownerProfiles: any[] = [];
let allSpecies: any[] = [];
let allSubspecies: any[] = [];

const getPetResult = await getPet(petId);
if (getPetResult.success) {
    pet = getPetResult.data ?? null;
}

const getOwnerProfilesResult = await getAllProfilesByRoleId(import.meta.env.OWNER_ROLE_ID, authenticatedUserId);
if (getOwnerProfilesResult.success) {
    ownerProfiles = getOwnerProfilesResult.data;
    ownerProfiles = ownerProfiles.map(op => ({
            id: op.id,
            name: `${op.name} ${op.lastname} ${op.me ? '(Tú)' : ''}`,
            me: op.me,
        }));
}

const getSpeciesResult = await getAllSpecies();
if (getSpeciesResult.success) {
    allSpecies = getSpeciesResult.data ?? [];
}
const getSubspeciesResult = await getAllSubspecies();
if (getSubspeciesResult.success) {
    allSubspecies = getSubspeciesResult.data ?? [];
}

const profileInput = {
    id: "name",
    name: "name",
    type: "text",
    autocomplete: "name",
    label: "Nombre",
    value: pet?.name,
};

const detailInputs = [
    {
        id: "owner",
        name: "owner",
        type: "combobox",
        label: "Dueño",
        value: pet ? 
            pet?.ownerProfileId.toString()
            : (ownerProfiles && ownerProfiles.length > 0) ? ownerProfiles.find(op => op.me === true)?.id.toString() : "",
        options: ownerProfiles ?? [],
        actions: [
            {
                label: `<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 inline-block mr-2" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clip-rule="evenodd" /></svg>Agregar nuevo dueño`,
                onClick: "document.dispatchEvent(new CustomEvent('open-modal', { detail: { id: 'petowner-modal' } }))"
            }
        ],
    },
    {
        id: "birthday",
        name: "birthday",
        type: "date",
        autocomplete: "birthday",
        label: "Fecha de nacimiento",
        value: pet?.birthday ? (new Date(pet.birthday)).toISOString().split('T')[0] : "",
    },
    {
        id: "species",
        name: "species",
        type: "combobox",
        label: "Especie",
        value: (allSubspecies.find(ss => ss.id === pet?.subspeciesId)?.speciesId?.toString()),
        options: allSpecies ?? [],
        actions: [
            {
                label: `<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 inline-block mr-2" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clip-rule="evenodd" /></svg>Agregar nueva especie`,
                onClick: "document.dispatchEvent(new CustomEvent('open-modal', { detail: { id: 'species-modal' } }))"
            }
        ],
    },
    {
        id: "subspecies",
        name: "subspecies",
        type: "combobox",
        label: "Raza",
        value: pet?.subspeciesId?.toString(),
        options: allSubspecies ?? [],
        actions: [
            {
                label: `<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 inline-block mr-2" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clip-rule="evenodd" /></svg>Agregar nueva raza`,
                onClick: "document.dispatchEvent(new CustomEvent('open-modal', { detail: { id: 'subspecies-modal' } }))"
            }
        ],
    },
    {
        id: "age",
        name: "age",
        type: "number",
        autocomplete: "age",
        label: "Edad (años)",
        value: pet?.birthday ? (() => {
            const birthDate = new Date(pet.birthday);
            const today = new Date();
            let age = today.getFullYear() - birthDate.getFullYear();
            const m = today.getMonth() - birthDate.getMonth();
            if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {
                age--;
            }
            return age;
        })() : "",
        readonly: true,
        tooltip: pet?.birthday ? "La edad se autocalcula según la fecha de nacimiento." : "La edad se autocalcula cuando se crea la mascota.",
    },
    {
        id: "weight",
        name: "weight",
        type: "number",
        autocomplete: "weight",
        label: "Peso (kg)",
        value:  (pet && pet?.medicalAppointmentsCount > 0) ? pet?.weight : "",
        readonly: true,
        tooltip: (pet && pet?.medicalAppointmentsCount > 0) ? "El peso se obtuvo de la última cita médica." : "El peso se obtendrá cuando se registre la primera cita médica.",
    },
    {
        id: "status",
        name: "status",
        type: "switch",
        trueLabel: "Activo",
        falseLabel: "Inactivo",
        value:  pet?.status === PetStatus.Inactive ? PetStatus.Inactive : PetStatus.Active,
        trueValue: PetStatus.Active,
        falseValue: PetStatus.Inactive,
        trueTooltip: "El estado actual de la mascota indica que sigue con vida.",
        falseTooltip: "El estado actual de la mascota indica que ha fallecido.",
    },
]

---
<!-- TODO: Reconocer si se han hecho cambios en cada input y según eso habilitar o deshabilitar el botón "Guardar cambios" 
 y si es que se navega a otra página, mostrar una alerta indicando que se van a perder los datos -->
<!-- Si existe pet mostrar datos y opciones para editar o eliminar -->
<!-- Si no existe pet entonces mostrar vacio como para crear un pet -->
<ContentContainer class="h-full">
    <div class="mb-8 flex items-start gap-4">
        <a href="/app/home" class="p-2 rounded-full text-gray-600 hover:bg-gray-200 transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-[#6faab5] -mt-1" aria-label="Volver a la página de inicio">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                <path stroke-linecap="round" stroke-linejoin="round" d="M15 19l-7-7 7-7" />
            </svg>
        </a>
        <div>
            <h2 class="text-2xl font-bold leading-tight text-gray-900">
                { pet ? "Datos de la mascota" : "Nueva mascota" }
            </h2>
            { pet && <p class="mt-1 text-md text-gray-600">Revisa y actualiza la información de {pet.name}.</p> }
        </div>
    </div>
    <form id="pet-form" class="grid grid-cols-1 lg:grid-cols-5 gap-8 items-center" data-pet-id={pet?.id} novalidate>
        <!-- Card de Perfil (Izquierda) -->
        <div class="lg:col-span-2 bg-white rounded-xl shadow-lg p-8 flex flex-col items-center text-center" transition:name={pet ? `pet-profile-${pet.id}`: ''}>
            <div class="relative w-40 h-40 mb-6">
                <img 
                    src={petProfilePhoto.src} 
                    alt={`Foto de ${pet?.name || 'mascota'}`} 
                    class="rounded-full w-40 h-40 object-cover border-4 border-white shadow-md"
                />
                <button type="button" aria-label="Cambiar foto" class="absolute bottom-0 right-0 bg-[#6faab5] text-white rounded-full p-2 hover:bg-[#5f9ea8] focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-[#6faab5]">
                    <EditIcon />
                </button>
            </div>
            <BaseTextInput {...profileInput} class="w-full" />
        </div>

        <!-- Card de Detalles (Derecha) -->
        <div class="lg:col-span-3 bg-white rounded-xl shadow-lg p-8">
            <h3 class="text-xl font-bold text-gray-800 mb-6 border-b pb-4">Información detallada</h3>
            <div class="grid grid-cols-1 sm:grid-cols-2 gap-x-6 gap-y-4">
            {
                detailInputs.map(input => {
                    if (input.type === 'switch') {
                        return <BaseSwitch {...input} />;
                    } else if (input.type === 'combobox') {
                        return <BaseCombobox {...input as ComboboxProps} />;
                    }
                    return <BaseTextInput {...input} />;
                })
            }
            </div>
            <div class="mt-8 pt-6 border-t border-gray-200 flex flex-col sm:flex-wrap sm:flex-row sm:justify-end gap-4">
                { pet &&
                    <>
                        {/* <a href="#" class="rounded-md bg-gray-200 px-4 py-2 text-center text-sm font-semibold text-gray-800 shadow-sm hover:bg-gray-300 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-gray-400">
                            Ver galería
                        </a> */}
                        <a href={`/app/pets/${petId}/medical-history`} class="rounded-md bg-gray-200 px-4 py-2 text-center text-sm font-semibold text-gray-800 shadow-sm hover:bg-gray-300 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-gray-400">
                            Historial médico
                        </a>
                    </>
                }
                <button id="submit-button" type="submit" class="rounded-md bg-[#6faab5] px-4 py-2 text-center text-sm font-semibold text-white shadow-sm hover:bg-[#5f9ea8] focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-[#6faab5] cursor-pointer disabled:opacity-50 disabled:cursor-not-allowed" disabled>
                    { pet ? "Guardar cambios" : "Crear mascota" }
                </button>
                { pet &&
                    <>
                        <button id="open-delete-dialog-button" type="button" class="rounded-md bg-red-600 px-4 py-2 text-sm font-semibold text-white shadow-sm hover:bg-red-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-red-600 cursor-pointer">
                            Eliminar
                        </button>
                        <DeletePetDialog petName={pet?.name} />
                    </>
                }
            </div>
        </div>
    </form>
    <PetOwnerModal />
    <SpeciesModal />
    <SubspeciesModal {allSpecies} />
    <ModalManager />
</ContentContainer>

<script>
    import { SavePetResource } from "@/contexts/pets/server/interfaces/api/resources/save-pet.resource";
    import { createPet } from "@/contexts/pets/client/usecases/create-pet.usecase";
    import { updatePet } from "@/contexts/pets/client/usecases/update-pet.usecase";

    declare global {
        interface Window {
            listenersInitialized?: boolean;
        }
    }
    function initializePageScripts() {
        const form = document.getElementById('pet-form') as HTMLFormElement | null;

        if (form) {
            const petNameInput = document.getElementById('name') as HTMLInputElement;
            const petOwnerInput = document.getElementById('owner-value') as HTMLInputElement;
            const birthdayInput = document.getElementById('birthday') as HTMLInputElement;
            const petSpeciesInput = document.getElementById('species-value') as HTMLInputElement;
            const petSubspeciesInput = document.getElementById('subspecies-value') as HTMLInputElement;
            const petAgeInput = document.getElementById('age') as HTMLInputElement;
            const petStatusInput = document.getElementById('status-value') as HTMLInputElement;
            const submitButton = document.getElementById('submit-button') as HTMLButtonElement;
            const formError = document.getElementById('form-error') as HTMLDivElement;

            // Habilita el botón de envío una vez que el script se ha cargado.
            if (submitButton) {
                submitButton.disabled = false;
            }
            
            const isNewPet = !form.dataset.petId;

            const showError = (input: HTMLInputElement, message: string) => {
                const isHiddenValueInput = input.id.endsWith('-value');
                const baseId = isHiddenValueInput ? input.id.slice(0, -6) : input.id;
                const errorContainer = document.getElementById(`${baseId}-error-container`);
                if (errorContainer) {
                    errorContainer.textContent = message;
                }
                // Aplica estilos al input visible, no al oculto.
                const visibleInput = isHiddenValueInput ? document.getElementById(baseId) as HTMLInputElement : input;
                if (visibleInput) {
                    visibleInput.classList.remove('outline-gray-300', 'focus:outline-blue-800');
                    visibleInput.classList.add('outline-red-500', 'focus:outline-red-500');
                }
            }

            const clearError = (input: HTMLInputElement) => {
                const isHiddenValueInput = input.id.endsWith('-value');
                const baseId = isHiddenValueInput ? input.id.slice(0, -6) : input.id;
                const errorContainer = document.getElementById(`${baseId}-error-container`);
                if (errorContainer) {
                    errorContainer.textContent = '';
                }
                // Restaura estilos en el input visible.
                const visibleInput = isHiddenValueInput ? document.getElementById(baseId) as HTMLInputElement : input;
                if (visibleInput) {
                    visibleInput.classList.remove('outline-red-500', 'focus:outline-red-500');
                    visibleInput.classList.add('outline-gray-300', 'focus:outline-blue-800');
                }
            }

            form.addEventListener('submit', async (event) => {
                console.log('ejecutando')
                event.preventDefault();

                // Limpia errores previos
                clearError(petNameInput);
                clearError(petOwnerInput);
                clearError(birthdayInput);
                clearError(petAgeInput);
                clearError(petSpeciesInput);
                clearError(petSubspeciesInput);
                if (formError) {
                    formError.textContent = '';
                }

                const petName = petNameInput.value;
                const petOwner = petOwnerInput.value;
                const birthday = birthdayInput.value;
                // const petAge = petAgeInput.value;
                const petSpecies = petSpeciesInput.value;
                const petSubspecies = petSubspeciesInput.value;
                const petStatus = petStatusInput.value;

                let isValid = true;

                // Validaciones
                if (!petName) {
                    showError(petNameInput, 'El nombre es obligatorio');
                    isValid = false;
                } else if (petName.length < 3) {
                    showError(petNameInput, 'El nombre debe tener al menos 3 caracteres');
                    isValid = false;
                }

                if (!petOwner) {
                    showError(petOwnerInput, 'El dueño es obligatorio');
                    isValid = false;
                }

                if (!birthday) {
                    showError(birthdayInput, 'La fecha de nacimiento es obligatoria');
                    isValid = false;
                }

                //********************************* */
                // No se valida ya que se autocalcula del birthday
                //********************************* */
                // if (!petAge) {
                //     showError(petAgeInput, 'La edad es obligatoria');
                //     isValid = false;
                // } else if (isNaN(Number(petAge))) {
                //     showError(petAgeInput, 'La edad debe ser un número válido');
                //     isValid = false;
                // }

                if (!petSpecies) {
                    showError(petSpeciesInput, 'La especie es obligatoria');
                    isValid = false;
                }

                if (!petSubspecies) {
                    showError(petSubspeciesInput, 'La raza es obligatoria');
                    isValid = false;
                } 
                console.log('ejecutando')

                if (isValid) {
                    console.log('ejecutando')
                    submitButton.disabled = true;
                    const resource = new SavePetResource(petName, /*petSpecies, petSubspecies,*/ "", new Date(birthday), petStatus, petOwner ?? 0, petSubspecies ?? 0);

                    if (isNewPet) {
                        submitButton.textContent = 'Creando mascota...';

                        try {
                            const response = await createPet(resource);
                            if (response.success) {
                                window.location.href = '/app/home';
                            } else {
                                formError.textContent = response.errorMessage ?? 'Error al crear mascota. Por favor, inténtalo de nuevo.';
                            }
                        } catch (error) {
                            console.error('Error al crear mascota:', error);
                            formError.textContent = 'Error al crear mascota. Por favor, inténtalo de nuevo.';
                        } finally {
                            submitButton.disabled = false;
                            submitButton.textContent = 'Crear mascota';
                        }
                    } else {
                        submitButton.textContent = 'Actualizando mascota...';

                        try {
                            const response = await updatePet(form.dataset.petId!, resource);
                            if (response.success) {
                                // window.location.reload();
                                window.location.href = '/app/home';
                            } else {
                                formError.textContent = response.errorMessage ?? 'Error al actualizar la mascota. Por favor, inténtalo de nuevo.';
                            }
                        } catch (error) {
                            console.error('Error al crear mascota:', error);
                            formError.textContent = 'Error al actualizar la mascota. Por favor, inténtalo de nuevo.';
                        } finally {
                            submitButton.disabled = false;
                            submitButton.textContent = 'Guardar cambios';
                        }
                    }
                }
            });
        }

        // --- Lógica para el botón de eliminar ---
        const openDialogButton = document.getElementById('open-delete-dialog-button');
        // Dialog in delete-pet-dialog.component.astro
        const dialog = document.getElementById('delete-dialog');
        const toggleDialog = (show: boolean) => {
            dialog?.classList.toggle('hidden', !show);
        }

        openDialogButton?.addEventListener('click', () => toggleDialog(true));
    }

    function initializeListeners() {
        // Evita añadir el listener múltiples veces con Astro View Transitions
        if (window.listenersInitialized) return;
        window.listenersInitialized = true;

        document.addEventListener('owner-created', (e) => {
            const event = e as CustomEvent;
            const newOwner = event.detail.newOwner;

            // Busca la instancia del combobox de dueños
            const ownerCombobox = window.comboboxInstances?.['owner'];

            if (ownerCombobox && newOwner) {
                // Prepara la nueva opción para el combobox
                const newOption = {
                    id: newOwner.id,
                    name: `${newOwner.name} ${newOwner.lastname}`
                };
                // Llama al nuevo método para añadir y seleccionar la opción
                ownerCombobox.addOptionAndSelect(newOption);
            }
        });

        document.addEventListener('species-created', (e) => {
            const event = e as CustomEvent;
            const newSpecies = event.detail.newSpecies;

            // Busca la instancia del combobox de especies
            const speciesCombobox = window.comboboxInstances?.['species'];

            if (speciesCombobox && newSpecies) {
                // Prepara la nueva opción para el combobox
                const newOption = {
                    id: newSpecies.id,
                    name: `${newSpecies.name}`
                };
                // Llama al nuevo método para añadir y seleccionar la opción
                speciesCombobox.addOptionAndSelect(newOption);
            }
        });

        document.addEventListener('subspecies-created', (e) => {
            const event = e as CustomEvent;
            const newSubspecies = event.detail.newSubspecies;

            // Busca la instancia del combobox de subspecies
            const subspeciesCombobox = window.comboboxInstances?.['subspecies'];

            if (subspeciesCombobox && newSubspecies) {
                // Prepara la nueva opción para el combobox
                const newOption = {
                    id: newSubspecies.id,
                    name: `${newSubspecies.name}`
                };
                // Llama al nuevo método para añadir y seleccionar la opción
                subspeciesCombobox.addOptionAndSelect(newOption);
            }
        });
    }

    // Ejecuta los scripts en la carga inicial de la página (con View Transitions) 
    // y en cada navegación del lado del cliente.
    document.addEventListener('astro:page-load', () => {
        initializePageScripts();
        initializeListeners();
    });

</script>