---
import BaseCombobox, { type Props as ComboboxProps } from "@/contexts/_shared/client/presentation/components/base-combobox.component.astro";
import BaseModal from "@/contexts/_shared/client/presentation/components/base-modal.component.astro";
import BaseTextInput from "@/contexts/_shared/client/presentation/components/base-text-input.component.astro";

const { allSpecies } = Astro.props;

const speciesInputs = [
    {
        id: "subspecies-name",
        name: "subspecies-name",
        type: "text",
        autocomplete: "subspecies-name",
        label: "Nombres",
        // value: species?.name,
    },
    {
        id: "subspecies-species",
        name: "species",
        type: "combobox",
        label: "Especie",
        options: allSpecies ?? [],
    },
]
---
<BaseModal id="subspecies-modal" title="Agregar nuevo raza">
    <form slot="body" id="subspecies-form" novalidate>
        {
            speciesInputs.map(input => {
                if (input.type === 'combobox') {
                    return <BaseCombobox {...input as ComboboxProps} />;
                }
                return <BaseTextInput {...input} />;
            })
        }
    </form>
    <div slot="footer">
        <button id='subspecies-submit-button' type="button" class="inline-flex w-full justify-center rounded-md bg-[#6faab5] px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-[#5f9ea8] sm:w-auto">Agregar raza</button>
        <button type="button" data-modal-close class="mt-3 inline-flex w-full justify-center rounded-md bg-white px-3 py-2 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50 sm:mt-0 sm:w-auto">Cancelar</button>
    </div>
</BaseModal>

<script>
    import { SaveSubspeciesResource } from "@/contexts/pets/server/interfaces/api/resources/save-subspecies.resource";
    // import { updateSpecies } from "@/contexts/pets/client/usecases/update-species.usecase";
    import { createSubspecies } from "@/contexts/pets/client/usecases/create-species-subspecies.usecase";

    function initializePageScripts() {
        const form = document.getElementById('subspecies-form') as HTMLFormElement | null;

        if (form) {
            const nameInput = document.getElementById('subspecies-name') as HTMLInputElement;
            const speciesInput = document.getElementById('subspecies-species-value') as HTMLInputElement;
            const submitButton = document.getElementById('subspecies-submit-button') as HTMLButtonElement;
            const formError = document.getElementById('subspecies-form-error') as HTMLDivElement;

            // Habilita el botón de envío una vez que el script se ha cargado.
            if (submitButton) {
                submitButton.disabled = false;
            }

            // const isNewOwner = !form.dataset.speciesId;
            const isNewOwner = true;

            const showError = (input: HTMLInputElement, message: string) => {
                const errorContainer = document.getElementById(`${input.id}-error-container`);
                if (errorContainer) {
                    errorContainer.textContent = message;
                }
                // Cambia el color del borde del input a rojo
                input.classList.remove('outline-gray-300', 'focus:outline-blue-800');
                input.classList.add('outline-red-500', 'focus:outline-red-500');
            }

            const clearError = (input: HTMLInputElement) => {
                const errorContainer = document.getElementById(`${input.id}-error-container`);
                if (errorContainer) {
                    errorContainer.textContent = '';
                }
                // Restaura el color del borde del input
                input.classList.remove('outline-red-500', 'focus:outline-red-500');
                input.classList.add('outline-gray-300', 'focus:outline-blue-800');
            }

            // form.addEventListener('submit', async (event) => {
            submitButton.addEventListener('click', async (event) => {
                // console.log('clicked')
                event.preventDefault();

                // Limpia errores previos
                clearError(nameInput);
                clearError(speciesInput);
                if (formError) {
                    formError.textContent = '';
                }

                const name = nameInput.value;
                const species = speciesInput.value;

                let isValid = true;

                // Validaciones
                if (!name) {
                    showError(nameInput, 'El nombre es obligatorio');
                    isValid = false;
                } else if (name.length < 3) {
                    showError(nameInput, 'El nombre debe tener al menos 3 caracteres');
                    isValid = false;
                }
                
                if (!species) {
                    showError(speciesInput, 'La especie es obligatoria');
                    isValid = false;
                }

                if (isValid) {
                    submitButton.disabled = true;
                    
                    const resource = new SaveSubspeciesResource(name);

                    if (isNewOwner) {
                        submitButton.textContent = 'Agregando raza...';

                        try {
                            const response = await createSubspecies(resource, species);
                            if (response.success && response.data) {
                                // 1. Dispara un evento con los datos de la nueva raza para que la página principal lo escuche
                                document.dispatchEvent(new CustomEvent('subspecies-created', {
                                    detail: { newSubspecies: response.data }
                                }));

                                // 2. Dispara un evento para cerrar este modal específico
                                document.dispatchEvent(new CustomEvent('close-modal-by-id', {
                                    detail: { id: 'subspecies-modal' }
                                }));

                                // 3. Limpia el formulario para la próxima vez
                                form.reset();
                                [nameInput, speciesInput].forEach(clearError);

                            } else {
                                formError.textContent = response.errorMessage ?? 'Error al agregar raza. Por favor, inténtalo de nuevo.';
                            }
                        } catch (error) {
                            console.error('Error al agregar raza:', error);
                            formError.textContent = 'Error al agregar raza. Por favor, inténtalo de nuevo.';
                        } finally {
                            submitButton.disabled = false;
                            submitButton.textContent = 'Agregar raza';
                        }
                    } else {
                        submitButton.textContent = 'Actualizando raza...';
                        // TODO
                        // try {
                        //     const response = await updateSpecies(speciesId, resource);
                        //     if (response.success) {
                        //         // window.location.reload();
                        //         // window.location.href = '/app/home';
                        //         // TODO: close modal
                        //     } else {
                        //         formError.textContent = response.errorMessage ?? 'Error al actualizar el raza. Por favor, inténtalo de nuevo.';
                        //     }
                        // } catch (error) {
                        //     console.error('Error al actualizar el raza:', error);
                        //     formError.textContent = 'Error al actualizar el raza. Por favor, inténtalo de nuevo.';
                        // } finally {
                        //     submitButton.disabled = false;
                        //     submitButton.textContent = 'Guardar cambios';
                        // }
                    }
                }
            });
        }
    }

    // Ejecuta los scripts en la carga inicial de la página (con View Transitions) 
    // y en cada navegación del lado del cliente.
    document.addEventListener('astro:page-load', initializePageScripts);

</script>