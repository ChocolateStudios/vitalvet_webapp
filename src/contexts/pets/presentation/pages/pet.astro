---
import petProfilePhoto from "../../../../assets/petProfilePhoto.png";
import { getPet } from "../../usecases/get-pet.usecase";
import PetBaseTextInput from "../components/pet-base-text-input.astro";

const { petId: petIdString } = Astro.props;

// Los parámetros de la URL siempre son strings.
// Los convertimos a número para usarlos en la lógica de la aplicación.
const petId = Number(petIdString);

// Es una buena práctica manejar el caso en que el ID no sea un número válido.
const pet = !isNaN(petId) ? getPet(petId) : null;

const inputFields = [
    {
        id: "name",
        name: "name",
        type: "text",
        autocomplete: "name",
        placeholder: "Pepito",
        label: "Nombre",
        value: pet?.name,
    },
    {
        id: "owner",
        name: "owner",
        type: "text",
        autocomplete: "owner",
        placeholder: "Manuel Quispe",
        label: "Propietario",
        value: pet?.ownerName,
    },
    {
        id: "birthday",
        name: "birthday",
        type: "date",
        autocomplete: "birthday",
        placeholder: "17 / 03 / 2021",
        label: "Fecha de nacimiento",
        value: pet?.birthday,
    },
    {
        id: "age",
        name: "age",
        type: "number",
        autocomplete: "age",
        placeholder: "40",
        label: "Edad",
        value: pet?.age,
    },
    {
        id: "species",
        name: "species",
        type: "text",
        autocomplete: "species",
        placeholder: "Perro",
        label: "Especie",
        value: pet?.species,
    },
    {
        id: "subspecies",
        name: "subspecies",
        type: "text",
        autocomplete: "subspecies",
        placeholder: "Subespecie",
        label: "Subespecie",
        value: pet?.subspecies,
    }
]

---
<!-- Mostramos un mensaje de error si la mascota no se encuentra o el ID es inválido -->
{ !pet && (
    <div class="p-8 text-center text-red-500 font-semibold">Mascota no encontrada o ID inválido.</div>
) }
<!-- Solo renderizamos el formulario si encontramos la mascota -->
{ pet && (
<div class="p-4 sm:p-6 lg:p-8 h-full">
    <h2 class="text-2xl font-bold">Datos de la mascota</h2>
    <form class="flex items-center gap-8 h-full">
        <div class="flex flex-col flex-3 items-center rounded-md outline-3 outline-blue-800 px-7 py-15">
            <div class="w-fit">
                <img src={petProfilePhoto.src} alt="Foto de Pepito" class="rounded-full w-40 h-40 object-cover border" transition:persist />
            </div>
            <PetBaseTextInput {...inputFields[0]} class="w-full" />
        </div>
        <div class="flex flex-col flex-4 rounded-md outline-3 outline-blue-950 px-7 py-8">
            {
                inputFields.map((input, index) => 
                    index > 0 ? <PetBaseTextInput {...input} /> : ""
                )
            }
            <div class="flex flex-col gap-1">
                <a href="#" class="rounded-md bg-blue-900 px-3 py-2 text-center text-sm font-semibold text-white shadow-sm hover:bg-blue-800 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-blue-800">Ver galería</a>
                <a href={`/app/pets/${petId}/medical-history`} class="rounded-md bg-blue-900 px-3 py-2 text-center text-sm font-semibold text-white shadow-sm hover:bg-blue-800 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-blue-800">Ver citas médicas</a>
                <button type="submit" class="rounded-md bg-blue-900 px-3 py-2 text-center text-sm font-semibold text-white shadow-sm hover:bg-blue-800 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-blue-800">Guardar</button>
            </div>
        </div>
    </form>
</div>
) }