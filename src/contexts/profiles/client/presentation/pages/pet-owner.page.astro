---
import ContentContainer from "@/contexts/_shared/client/presentation/components/content/content-container.component.astro"
import DynamicInput from "@/contexts/_shared/client/presentation/components/inputs/dynamic-input.component.astro";
import type { ProfileInfo } from "@/contexts/profiles/client/usecases/get-profile.usecase";
import { getProfileById } from "@/contexts/profiles/server/application/usecases/get-profile.usecase";
import { getRoleById } from "@/contexts/profiles/server/application/usecases/get-role.usecase";
import DeleteProfileDialog from "@/contexts/profiles/client/presentation/components/delete-profile-dialog.component.astro";
import ActionButton from "@/contexts/_shared/client/presentation/components/actions/action-button.component.astro";
import ContentTop from "@/contexts/_shared/client/presentation/components/content/content-top.component.astro";
import SimpleForm from "@/contexts/_shared/client/presentation/components/forms/simple-form.component.astro";
import { getAuthenticatedUserIdOrRedirect } from "@/contexts/_shared/server/application/usecases/get-authenticated-user-or-redirect";

/*******************************
 ***** User authentication *****
********************************/
// Probably never redirect from here because it would do so from the middleware
getAuthenticatedUserIdOrRedirect(Astro);

/****************************
 ***** Page paramenters *****
*****************************/
const { ownerId } = Astro.props;

/************************************
 ***** Get info to show on page *****
*************************************/
let profile: ProfileInfo | null = null;
let role: any;

const getProfileResult = await getProfileById(ownerId);
if (getProfileResult.success) {
    profile = getProfileResult.data;
}

const getRoleResult = await getRoleById(import.meta.env.OWNER_ROLE_ID);
if (getRoleResult.success) {
    role = getRoleResult.data;
}

/***********************
 ***** Form inputs *****
************************/
const profileInputs = [
    {
        id: "name",
        name: "name",
        type: "text",
        autocomplete: "name",
        label: "Nombres",
        value: profile?.name,
        validations: [
            { validate: ((value: any) => !!value).toString(), message: 'El nombre es obligatorio' }
        ],
    },
    {
        id: "lastname",
        name: "lastname",
        type: "text",
        autocomplete: "lastname",
        label: "Apellidos",
        value: profile?.lastname,
        validations: [
            { validate: ((value: any) => !!value).toString(), message: 'El apellido es obligatorio' }
        ],
    },
    {
        id: "birthday",
        name: "birthday",
        type: "date",
        autocomplete: "birthday",
        label: "Fecha de nacimiento",
        value: profile?.birthday ? (new Date(profile.birthday)).toISOString().split('T')[0] : "",
        validations: [
            { validate: ((value: any) => !!value).toString(), message: 'La fecha de nacimiento es obligatoria' }
        ],
    },
    {
        id: "email",
        name: "email",
        type: "email",
        autocomplete: "email",
        label: "Correo electrónico",
        value: profile?.email,
        validations: [
            { validate: ((value: any) => !!value).toString(), message: 'El correo electrónico es obligatorio' },
            { validate: ((value: any) => value.includes('@')).toString(), message: 'El correo electrónico debe contener un @' }
        ],
    },
    {
        id: "phone",
        name: "phone",
        type: "text",
        autocomplete: "phone",
        label: "Teléfono",
        value: profile?.phone,
        validations: [
            { validate: ((value: any) => !!value).toString(), message: 'El teléfono es obligatorio' }
        ],
    },
    {
        id: "role",
        name: "role",
        type: "text",
        autocomplete: "role",
        label: "Rol",
        value: role.name,
        readonly: true,
    },
]
---

<ContentContainer>
    <!-- ----------------
    ------ Top bar ------
    ----------------- -->
    <ContentTop backHref="/app/owners">
        { profile ? "Datos del dueño" : "Nuevo dueño" }
        { profile && 
            <p slot="subtitle" class="mt-1 text-md text-gray-600">
                Revisa y actualiza la información de {profile.name}.
            </p> 
        }
    </ContentTop>

    <!-- ------------------
    ------ Main form ------
    ------------------- -->
    <!-- (Important to set editMode) -->
    <SimpleForm id="profile-form" editMode={!!profile} dataset={{ ownerId: profile?.id, roleId: profile ? profile.roleId : role.id }}>
        <div class="flex flex-col items-end bg-white rounded-xl shadow-lg p-8 w-full max-w-lg">
            {
                profileInputs.map(input => 
                    <DynamicInput {...input} />
                )
            }

            <!-- -----------------------
            ------ Action buttons ------
            ------------------------ -->
            <div class="mt-8 pt-6 border-t border-gray-200 flex flex-col sm:flex-wrap sm:flex-row sm:justify-end gap-4 w-full">
                <ActionButton id="submit-button" type="submit">
                    { profile ? "Guardar cambios" : "Crear dueño" }
                </ActionButton>
                { profile &&
                    <>
                        <ActionButton id="open-delete-dialog-button" type="danger">
                            Eliminar
                        </ActionButton>
                        <DeleteProfileDialog petName={profile?.name} />
                    </>
                }
            </div>
        </div>
    </SimpleForm>
</ContentContainer>

<script>
    import { SaveProfileResource } from "@/contexts/profiles/server/interfaces/api/resources/save-profile.resource";
    import { updateProfile } from "@/contexts/profiles/client/usecases/update-profile.usecase";
    import { createProfile } from "@/contexts/profiles/client/usecases/create-profile.usecase";

    function initializeForm() {
        const form = document.getElementById('profile-form') as HTMLFormElement;
        if (!form) return;

        /************************
         ***** Submit event *****
        *************************/

        // Before this event, in base-form.astro validations were executed
        form.addEventListener('form:submit', async (event: any) => {
            const { data, submitButton, isEditMode, formDataObj, formError } = event.detail;

            /********************
             ***** Api Call *****
            *********************/

            // If all good, REGISTER/UPDATE
            submitButton.disabled = true;
            submitButton.textContent = !isEditMode ? 'Creando dueño...' : 'Actualizando dueño...';

            const resource = new SaveProfileResource(data.name, data.lastname, data.email, data.phone, new Date(data.birthday), formDataObj.roleId!);
            const actionMessage = !isEditMode ? 'crear' : 'actualizar';
            const badErrorMessage = `Error al ${actionMessage} dueño. Por favor, inténtalo de nuevo.`;

            try {
                const response = !isEditMode
                    ? await createProfile(resource)
                    : await updateProfile(resource, formDataObj.ownerId!);

                if (response.success) {
                    window.location.href = '/app/owners';
                } else {
                    formError.textContent = response.errorMessage ?? badErrorMessage;
                }
            } catch (error) {
                console.error(`Error al ${actionMessage} dueño:`, error);
                formError.textContent = badErrorMessage;
            } finally {
                submitButton.disabled = false;
                submitButton.textContent = !isEditMode ? 'Crear dueño' : 'Guardar cambios';
            }
        });
    }

    function initializeDeleteDialog() {
        /*******************************
         ***** Delete dialog logic *****
        ********************************/

        const openDialogButton = document.getElementById('open-delete-dialog-button');
        const dialog = document.getElementById('delete-dialog');
        const toggleDialog = (show: boolean) => dialog?.classList.toggle('hidden', !show);

        openDialogButton?.addEventListener('click', () => toggleDialog(true));
    }

    /************************************
     ***** Run scripts on page load *****
    *************************************/
    document.addEventListener('astro:page-load', () => {
        initializeForm();
        initializeDeleteDialog();
    });

</script>