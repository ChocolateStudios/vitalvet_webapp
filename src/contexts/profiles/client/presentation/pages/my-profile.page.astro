---
import ContentContainer from "@/contexts/_shared/client/presentation/components/content/content-container.component.astro"
import DynamicInput from "@/contexts/_shared/client/presentation/components/inputs/dynamic-input.component.astro"
// import BaseTextInput from "@/contexts/_shared/client/presentation/components/base-text-input.component.astro"
import { getMyProfile } from "@/contexts/profiles/server/application/usecases/get-profile.usecase";
import type { ProfileInfo } from "@/contexts/profiles/client/usecases/get-profile.usecase";
import { getAuthenticatedUserIdOrRedirect } from "@/contexts/_shared/server/application/usecases/get-authenticated-user-or-redirect";
import ActionButton from "@/contexts/_shared/client/presentation/components/actions/action-button.component.astro";
import ContentTop from "@/contexts/_shared/client/presentation/components/content/content-top.component.astro";
import SimpleForm from "@/contexts/_shared/client/presentation/components/forms/simple-form.component.astro";

const authenticatedUserId = getAuthenticatedUserIdOrRedirect(Astro);

let profile: ProfileInfo | null = null;
const getProfileResult = await getMyProfile(authenticatedUserId);

if (getProfileResult.success) {
    profile = getProfileResult.data;
}

const profileInputs = [
    {
        id: "name",
        name: "name",
        type: "text",
        autocomplete: "name",
        label: "Nombres",
        value: profile?.name,
    },
    {
        id: "lastname",
        name: "lastname",
        type: "text",
        autocomplete: "lastname",
        label: "Apellidos",
        value: profile?.lastname,
    },
    {
        id: "birthday",
        name: "birthday",
        type: "date",
        autocomplete: "birthday",
        label: "Fecha de nacimiento",
        value: profile?.birthday ? (new Date(profile.birthday)).toISOString().split('T')[0] : "",
    },
    {
        id: "email",
        name: "email",
        type: "email",
        autocomplete: "email",
        label: "Correo electrónico",
        value: profile?.email,
    },
    {
        id: "phone",
        name: "phone",
        type: "text",
        autocomplete: "phone",
        label: "Teléfono",
        value: profile?.phone,
    },
    {
        id: "role",
        name: "role",
        type: "text",
        autocomplete: "role",
        label: "Rol",
        value: profile?.roleName,
        readonly: true,
    },
]
---

<ContentContainer>
    <ContentTop>Perfil</ContentTop>
     <SimpleForm id="profile-form" dataset={{ profileId: profile?.id, roleId: profile?.roleId }}>
        <div class="flex flex-col items-end bg-white rounded-xl shadow-lg p-8 w-full max-w-lg">
            {
                profileInputs.map(input => 
                    <DynamicInput {...input} />
                )
            }
            <ActionButton id="submit-button" type="submit">
                { profile ? "Guardar cambios" : "Crear perfil" }
            </ActionButton>
        </div>
    </SimpleForm>
</ContentContainer>

<script>
    import { SaveProfileResource } from "@/contexts/profiles/server/interfaces/api/resources/save-profile.resource";
    import { updateMyProfile } from "@/contexts/profiles/client/usecases/update-profile.usecase";
    import { FormStateManager } from "@/contexts/_shared/client/utils/form-state-manager";
    import { getFormDataObj } from "@/contexts/_shared/client/presentation/components/forms/form-utils";

    function initializePageScripts() {
        const form = document.getElementById('profile-form') as HTMLFormElement;
        const submitButton = document.getElementById('submit-button') as HTMLButtonElement;

        if (form && submitButton) {
            const formDataObj = getFormDataObj(form);
            
            const isEditMode = !!formDataObj.profileId;

            if (isEditMode) {
                const formStateManager = new FormStateManager(form, submitButton);
                formStateManager.initialize();
            } else {
                // En modo creación, el botón debe estar habilitado por defecto
                submitButton.disabled = false;
            }

            const nameInput = document.getElementById('name') as HTMLInputElement;
            const lastnameInput = document.getElementById('lastname') as HTMLInputElement;
            const birthdayInput = document.getElementById('birthday') as HTMLInputElement;
            const emailInput = document.getElementById('email') as HTMLInputElement;
            const phoneInput = document.getElementById('phone') as HTMLInputElement;
            const formError = document.getElementById('form-error') as HTMLDivElement;

            const showError = (input: HTMLInputElement, message: string) => {
                const errorContainer = document.getElementById(`${input.id}-error-container`);
                if (errorContainer) {
                    errorContainer.textContent = message;
                }
                // Cambia el color del borde del input a rojo
                input.classList.remove('outline-gray-300', 'focus:outline-blue-800');
                input.classList.add('outline-red-500', 'focus:outline-red-500');
            }

            const clearError = (input: HTMLInputElement) => {
                const errorContainer = document.getElementById(`${input.id}-error-container`);
                if (errorContainer) {
                    errorContainer.textContent = '';
                }
                // Restaura el color del borde del input
                input.classList.remove('outline-red-500', 'focus:outline-red-500');
                input.classList.add('outline-gray-300', 'focus:outline-blue-800');
            }

            form.addEventListener('submit', async (event) => {
                event.preventDefault();

                // Limpia errores previos
                clearError(nameInput);
                clearError(lastnameInput);
                clearError(birthdayInput);
                clearError(emailInput);
                clearError(phoneInput);
                if (formError) {
                    formError.textContent = '';
                }

                const name = nameInput.value;
                const lastname = lastnameInput.value;
                const birthday = birthdayInput.value;
                const email = emailInput.value;
                const phone = phoneInput.value;

                let isValid = true;

                // Validaciones
                if (!name) {
                    showError(nameInput, 'El nombre es obligatorio');
                    isValid = false;
                } else if (name.length < 3) {
                    showError(nameInput, 'El nombre debe tener al menos 3 caracteres');
                    isValid = false;
                }
                
                if (!lastname) {
                    showError(lastnameInput, 'El apellido es obligatorio');
                    isValid = false;
                } else if (lastname.length < 3) {
                    showError(lastnameInput, 'El apellido debe tener al menos 3 caracteres');
                    isValid = false;
                }

                if (!birthday) {
                    showError(birthdayInput, 'La fecha de nacimiento es obligatoria');
                    isValid = false;
                }

                if (!email) {
                    showError(emailInput, 'El correo es obligatorio');
                    isValid = false;
                } else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) {
                    showError(emailInput, 'Por favor, introduce un correo válido');
                    isValid = false;
                }

                if (!phone) {
                    showError(phoneInput, 'El teléfono es obligatoria');
                    isValid = false;
                }

                if (isValid) {
                    submitButton.disabled = true;

                    const resource = new SaveProfileResource(name, lastname, email, phone, new Date(birthday), formDataObj.roleId!);

                    submitButton.textContent = 'Actualizando perfil...';

                    try {
                        const response = await updateMyProfile(resource);
                        if (response.success) {
                            window.location.href = '/app/home';
                        } else {
                            formError.textContent = response.errorMessage ?? 'Error al actualizar perfil. Por favor, inténtalo de nuevo.';
                        }
                    } catch (error) {
                        console.error('Error al actualizar perfil:', error);
                        formError.textContent = 'Error al actualizar perfil. Por favor, inténtalo de nuevo.';
                    } finally {
                        submitButton.disabled = false;
                        submitButton.textContent = 'Guardar cambios';
                    }
                }
            });
        }

        // --- Lógica para el botón de eliminar ---
        const openDialogButton = document.getElementById('open-delete-dialog-button');
        // Dialog in delete-pet-dialog.component.astro
        const dialog = document.getElementById('delete-dialog');
        const toggleDialog = (show: boolean) => {
            dialog?.classList.toggle('hidden', !show);
        }

        openDialogButton?.addEventListener('click', () => toggleDialog(true));
    }

    // Ejecuta los scripts en la carga inicial de la página (con View Transitions) 
    // y en cada navegación del lado del cliente.
    document.addEventListener('astro:page-load', initializePageScripts);

</script>