---
import ContentContainer from "@/contexts/_shared/client/presentation/components/content/content-container.component.astro";
import DynamicInput from "@/contexts/_shared/client/presentation/components/inputs/dynamic-input.component.astro";
import DeletePetBathDialog from "@/contexts/baths/client/presentation/components/delete-pet-bath-dialog.component.astro";
import { getPet } from "@/contexts/pets/server/application/usecases/get-pet.usecase";
import { getAllProfilesByRoleId } from "@/contexts/profiles/server/application/usecases/get-all-profiles-by-role-id.usecase";
import { getAuthenticatedUserIdOrRedirect } from "@/contexts/_shared/server/application/usecases/get-authenticated-user-or-redirect";
import type { PetInfo } from "@/contexts/pets/client/usecases/get-pet.usecase";
import { getBath, type BathInfo } from "@/contexts/baths/server/application/usecases/get-bath.usecase";
import ActionButton from "@/contexts/_shared/client/presentation/components/actions/action-button.component.astro";
import ContentTop from "@/contexts/_shared/client/presentation/components/content/content-top.component.astro";
import GridForm from "@/contexts/_shared/client/presentation/components/forms/grid-form.component.astro";
import PetMiniprofileCard from "@/contexts/pets/client/presentation/components/pet-miniprofile-card.component.astro";
import SimpleCard from "@/contexts/_shared/client/presentation/components/cards/simple-card.component.astro";

/*******************************
 ***** User authentication *****
********************************/
// Probably never redirect from here because it would do so from the middleware
const authenticatedUserId = getAuthenticatedUserIdOrRedirect(Astro);

/****************************
 ***** Page paramenters *****
*****************************/
const { petId, bathId } = Astro.props;

/************************************
 ***** Get info to show on page *****
*************************************/
let pet: PetInfo | null = null;
let bath: BathInfo | null = null;
let doctorProfiles: any[] = [];

const getPetResult = await getPet(petId);
if (getPetResult.success) {
    pet = getPetResult.data ?? null;
}

const getBathResult = await getBath(petId, bathId);
if (getBathResult.data) {
    bath = getBathResult.data ?? null;
}

const getDoctorProfilesResult = await getAllProfilesByRoleId(import.meta.env.VETERINARIAN_ROLE_ID, authenticatedUserId);
if (getDoctorProfilesResult.success) {
    doctorProfiles = getDoctorProfilesResult.data;
    doctorProfiles = doctorProfiles.map(dp => ({
            id: dp.id,
            name: `${dp.name} ${dp.lastname} ${dp.me ? '(T칰)' : ''}`,
            me: dp.me,
        }));
}

/***********************
 ***** Form inputs *****
************************/
const bathInfoInputs = [
    {
        id: "doctor",
        name: "doctor",
        type: "combobox",
        label: "Veterinario",
        value: bath ? 
            bath?.doctorProfileId.toString()
            : (doctorProfiles && doctorProfiles.length > 0) ? doctorProfiles.find(dp => dp.me === true)?.id.toString() : "",
        options: doctorProfiles ?? [],
        validations: [
            { validate: ((value: any) => !!value).toString(), message: 'El veterinario es obligatorio' }
        ],
        showMandatory: true,
    },
];

const bathInputs = [
    {
        id: "date",
        name: "date",
        type: "date",
        label: "Fecha",
        value: bath ? (new Date(bath.bathDate)).toISOString().split('T')[0] : new Date().toISOString().split('T')[0],
        validations: [
            { validate: ((value: any) => !!value).toString(), message: 'La fecha es obligatoria' }
        ],
        showMandatory: true,
    },
    {
        id: "observations",
        name: "observations",
        type: "textarea",
        label: "Observaciones",
        value: bath?.observations,
        validations: [
            { validate: ((value: any) => !!value).toString(), message: 'Las observaciones son obligatorias' }
        ],
        showMandatory: true,
    },
];

---

<ContentContainer class="h-full">
    <!-- ----------------
    ------ Top bar ------
    ----------------- -->
    <ContentTop backHref={`/app/pets/${petId}/baths-history`}>
        {
            // Main Title
            bath ? 
                `Ba침o N춿 ${bath?.bathNumber}`
                :
                "Nuevo ba침o"
        }
    </ContentTop>

    <!-- ------------------
    ------ Main form ------
    ------------------- -->
    <!-- (Important to set editMode) -->
    <GridForm id="bath-form" editMode={!!bath} lgCols={6} dataset={{ petId: pet?.id, bathId: bath?.id }}>
        <!-- Left Side -->
        <div class="lg:col-span-2 flex flex-col gap-6">

            <!-- ----------------------------------
            ------ 游냤 Pet mini profiled card ------
            ----------------------------------- -->
            <PetMiniprofileCard pet={pet} />
            <div class="bg-white rounded-xl shadow-lg p-7 text-left">
                <h3 class="font-semibold mb-3">Informaci칩n del ba침o</h3>
                <div class="flex flex-col items-center w-full">
                {
                    bathInfoInputs.map(infoInput => 
                        <DynamicInput {...infoInput} />
                    )
                }
                </div>
            </div>
        </div>


        <!-- -----------------------
        ------ Details card ------
        ------------------------ -->
        <SimpleCard lgColSpan="4">
            <h4 class="mb-4">Datos del ba침o</h4>
            {
                bathInputs.map(inputs => 
                    <DynamicInput {...inputs} />
                )
            }
        </SimpleCard>

        <!-- -----------------------
        ------ Action buttons ------
        ------------------------ -->
        <div class="col-span-full flex sm:flex-wrap sm:flex-row sm:justify-end mt-7 gap-4">
            <ActionButton id="submit-button" type="submit" disabled>
                { bath ? "Guardar cambios" : "Crear ba침o" }
            </ActionButton>
            { bath &&
                <>
                    <ActionButton id="open-delete-dialog-button" type="danger">
                        Eliminar
                    </ActionButton>
                    <DeletePetBathDialog />
                </>
            }
        </div>
    </SimpleForm>
</ContentContainer>

<script>
    import { SaveBathResource } from "@/contexts/baths/server/interfaces/api/resources/save-bath.resource";
    import { createBath } from "@/contexts/baths/client/usecases/create-bath.usecase";
    import { updateBath } from "@/contexts/baths/client/usecases/update-bath.usecase";

    function initializeForm() {
        const form = document.getElementById('bath-form') as HTMLFormElement | null;
        if (!form) return;

        /************************
         ***** Submit event *****
        *************************/

        // Before this event, in base-form.astro validations were executed
        form.addEventListener('form:submit', async (event: any) => {
            const { data, submitButton, isEditMode, formDataObj, formError } = event.detail;

            /********************
             ***** Api Call *****
            *********************/

            // If all good, REGISTER/UPDATE
            submitButton.disabled = true;
            submitButton.textContent = !isEditMode ? 'Creando ba침o...' : 'Actualizando ba침o...';

            const resource = new SaveBathResource(new Date(data.date), data.observations, data.doctor ?? 0);
            const actionMessage = !isEditMode ? 'crear' : 'actualizar';
            const badErrorMessage = `Error al ${actionMessage} ba침o. Por favor, int칠ntalo de nuevo.`;

            try {
                const response = !isEditMode ? await createBath(formDataObj.petId!, resource) : 
                                    await updateBath(formDataObj.petId!, formDataObj.bathId!, resource);

                if (response.success) {
                    window.location.href = `/app/pets/${formDataObj.petId!}/baths-history`;
                } else {
                    formError.textContent = response.errorMessage ?? badErrorMessage;
                }
            } catch (error) {
                console.error(`Error al ${actionMessage} ba침o:`, error);
                formError.textContent = badErrorMessage;
            } finally {
                submitButton.disabled = false;
                submitButton.textContent = !isEditMode ? 'Crear ba침o' : 'Guardar cambios';
            }
        });
    }

    function initializeDeleteDialog() {
        /*******************************
         ***** Delete dialog logic *****
        ********************************/

        const openDialogButton = document.getElementById('open-delete-dialog-button');
        const dialog = document.getElementById('delete-dialog');
        const toggleDialog = (show: boolean) => dialog?.classList.toggle('hidden', !show);

        openDialogButton?.addEventListener('click', () => toggleDialog(true));
    }

    /************************************
     ***** Run scripts on page load *****
    *************************************/
    document.addEventListener('astro:page-load', () => {
        initializeForm();
        initializeDeleteDialog();
    });
</script>