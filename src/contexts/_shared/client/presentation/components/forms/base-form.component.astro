--- 
import ConfirmDialog from "@/contexts/_shared/client/presentation/components/dialogs/confirm-dialog.component.astro";

export interface Props {
    id?: string;
    dataset?: any;
    class?: string | (string | Record<string, any>)[];
    editMode?: boolean;
}

const {
    id,
    dataset,
    class: className,
    editMode,
} = Astro.props as Props;
---

<form id={id} class:list={className} data-form-data={JSON.stringify({ ...dataset, editMode })} novalidate>
    <slot/>
</form>

<ConfirmDialog 
    id="confirm-dialog-unsaved-changes"
    title="Cambios no guardados"
    message="Tienes cambios sin guardar. ¿Estás seguro de que quieres salir? Perderás el progreso."
    confirmText="Salir sin guardar"
    cancelText="Permanecer"
/>

<script>
    import { FormStateManager } from "@/contexts/_shared/client/utils/form-state-manager";
    import { clearError, collectValidationRulesAndDeleteFromDOM, getFormDataObj, showError, validateRulesPerField } from "@/contexts/_shared/client/presentation/components/forms/form-utils";

    function initializePageScripts() {
        class BaseForm extends HTMLElement {
            form: HTMLFormElement | null = null;
            inputs: NodeListOf<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement> | [] = [];
            submitButton: HTMLButtonElement | null = null;
            isEditMode: boolean = false;
            formDataObj: any = {};
            formError?: HTMLDivElement | null = null;
            validationRules: any[] = [];
            formStateManager: FormStateManager | null = null;

            private navigationConfirmed = false;
            private targetUrl: string | null = null;

            constructor() {
                super();
            }


            /*******************************************************
             ***** Form initialization when is inserted on DOM *****
            ********************************************************/
            connectedCallback() {
                // setTimeout -> Defer the initialization to the next event loop cycle.
                // This is a common pattern to solve race conditions where a parent element's
                // callback fires before its children have been appended by an external script.
                setTimeout(() => {
                    this.form = this.querySelector('form');
                    if (!this.form) return;

                    this.inputs = this.form.querySelectorAll('input, select, textarea');
                    this.submitButton = this.form.querySelector('button[type="submit"]');

                    if (!this.submitButton) return;

                    /****************************************************************
                     ***** Initialize FormStateManager for forms in "edit mode" *****
                    *****************************************************************/
                    // to enable/disable submit button when some field is changed
                    this.formDataObj = getFormDataObj(this.form);
                    this.isEditMode = this.formDataObj?.editMode === 'true' || this.formDataObj?.editMode === true;

                    this.formStateManager = new FormStateManager(this.form, this.submitButton);
                    
                    if (!this.isEditMode) {
                        // For non-edit mode forms, ensure the button is enabled by default.
                        this.formStateManager.initialize();
                        this.submitButton.disabled = true;
                    } else {
                        // submit button is disable because there is no changes.
                        this.submitButton.disabled = false;
                    }

                    /*****************************************
                     ***** Collect form validation rules *****
                    ******************************************/
                    this.validationRules = collectValidationRulesAndDeleteFromDOM(this.form);

                    /*************************************
                     ***** Bind submit event to form *****
                    **************************************/
                    this.form.addEventListener('submit', this.handleSubmit.bind(this));

                    /*************************************************
                     ***** Navigation guard for unsaved changes *****
                    **************************************************/
                    this.setupNavigationGuard();
                }, 0);
            }

            /********************************
             ***** On form submit event *****
            *********************************/
            private handleSubmit(event: Event) {
                event.preventDefault();

                /***************************************
                 ***** Cleaning up previous errors *****
                ****************************************/
                // Limpia errores previos de todos los inputs
                this.inputs.forEach(input => clearError(input as HTMLInputElement));

                // Limpia el error general del formulario
                this.formError = this.form?.querySelector('.form-error');
                if (this.formError) {
                    this.formError.textContent = '';
                }

                /**********************************************
                 ***** Emit event for logic from the page *****
                ***********************************************/
                
                const formData = new FormData(this.form!);
                const data = Object.fromEntries(formData.entries());
            
                /*****************************
                 ***** Input Validations *****
                ******************************/
                // Only run validation if rules are provided
                if (this.validationRules) {
                    // Execute input validations
                    const { isValid, errors } = validateRulesPerField(this.validationRules, data);

                    if (!isValid) {
                        const inputsMap = new Map(Array.from(this.inputs).map((i: any) => [i.name, i]));
                        for (const fieldName in errors) {
                            const inputElement = inputsMap.get(fieldName) as HTMLInputElement;
                            if (inputElement) {
                                showError(inputElement, errors[fieldName]); // show error message per input
                            }
                        }
                        return; // Stop execution
                    }
                }
            
                /****************************************
                 ***** Dispatch event to page logic *****
                *****************************************/
                this.form?.dispatchEvent(new CustomEvent('form:submit', {
                    bubbles: true,
                    composed: true,
                    detail: { data, inputs: this.inputs, submitButton: this.submitButton, isEditMode: this.isEditMode, formDataObj: this.formDataObj, },
                }));
            
                /**********************************************************************
                 ***** Allow navigate to another page without show confirm dialog *****
                ***********************************************************************/
                this.navigationConfirmed = true;
            }

            /*************************************************
             ***** Navigation guard for unsaved changes *****
            **************************************************/
            private setupNavigationGuard() {
                // Listen for Astro's view transition navigation
                document.addEventListener('astro:before-preparation', this.handleNavigation.bind(this) as EventListener);

                // Listen for clicks on any link
                document.addEventListener('click', this.handleLinkClick.bind(this), true); // Use capture phase

                // Listen for dialog confirmation
                document.addEventListener('dialog-confirmed', this.handleDialogConfirm.bind(this) as EventListener);
            }

            private handleLinkClick(event: MouseEvent) {
                const target = (event.target as HTMLElement).closest('a');
                if (!target || target.href === window.location.href) return;

                // Create a mock navigation event to reuse the handler
                const mockNavEvent = {
                    preventDefault: () => event.preventDefault(),
                    detail: { to: target.href }
                };
                this.handleNavigation(mockNavEvent as any);
            }

            private handleNavigation(event: CustomEvent & { detail: { to: string } }) {
                if (this.navigationConfirmed) return;

                if (this.formStateManager?.isDirty()) {
                    event.preventDefault();
                    this.targetUrl = event.detail.to;
                    document.dispatchEvent(new CustomEvent('open-confirm-dialog', { detail: { id: 'confirm-dialog-unsaved-changes' } }));
                }
            }

            private handleDialogConfirm(event: CustomEvent) {
                if (event.detail.id === 'confirm-dialog-unsaved-changes' && this.targetUrl) {
                    this.navigationConfirmed = true;
                    window.location.href = this.targetUrl;
                }
            }

            public getFormData() {
                if (!this.form) return {};
                const formData = new FormData(this.form);
                return Object.fromEntries(formData.entries());
            }
        }

        /*******************************************************
         ***** Create <base-form-container> wraper element *****
        ********************************************************/
        // Define the custom element if it hasn't been defined yet.
        if (!customElements.get('base-form-container')) {
            // Use a container name to avoid conflicts with the Astro component itself
            customElements.define('base-form-container', BaseForm);
        }

        // To make this script work with Astro's View Transitions,
        // we need to wrap our component in a custom element container.
        // This script will run on every page load.
        document.querySelectorAll('form').forEach(form => {
            // Check if the wrapper has already been added
            if (form.parentElement?.tagName !== 'BASE-FORM-CONTAINER') {
                const wrapper = document.createElement('base-form-container');
                wrapper.setAttribute('id', `${form.id}-container`);
                form.before(wrapper);
                wrapper.append(form);
            }
        });
    }

    // Ejecuta los scripts en la carga inicial de la página (con View Transitions) 
    // y en cada navegación del lado del cliente.
    document.addEventListener('astro:page-load', () => {
        initializePageScripts();
    });
</script>