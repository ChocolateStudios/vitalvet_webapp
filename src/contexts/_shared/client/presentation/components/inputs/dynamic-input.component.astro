---
// src/contexts/_shared/client/presentation/components/dynamic-input.astro
import SimpleTextInput from "@/contexts/_shared/client/presentation/components/inputs/simple-text-input.component.astro";
import TextareaInput from "@/contexts/_shared/client/presentation/components/inputs/textarea-input.component.astro";
import SwitchInput from "@/contexts/_shared/client/presentation/components/inputs/switch-input.component.astro";
import ComboboxInput from "@/contexts/_shared/client/presentation/components/inputs/combobox-input.component.astro";
import type { Props as SimpleTextProps } from "@/contexts/_shared/client/presentation/components/inputs/simple-text-input.component.astro";
import type { Props as TextareaProps } from "@/contexts/_shared/client/presentation/components/inputs/textarea-input.component.astro";
import type { Props as SwitchProps } from "@/contexts/_shared/client/presentation/components/inputs/switch-input.component.astro";
import type { Props as ComboboxProps } from "@/contexts/_shared/client/presentation/components/inputs/combobox-input.component.astro";

type ComponentMap = {
  [key: string]: any; 
};

export type Props = SimpleTextProps | TextareaProps | SwitchProps | ComboboxProps;

const { 
  type = "text", 
  validations,
  ...props
} = Astro.props as any;

const inputComponents: ComponentMap = {
  textarea: TextareaInput,
  switch: SwitchInput,
  combobox: ComboboxInput,
};

// Por defecto, usamos SimpleTextInput para todos los tipos de input est√°ndar
const Component = inputComponents[type] || SimpleTextInput;
---

<!--
  We are passing the validation object as a JSON string because 
  we can parse it back into a JavaScript object on the <script>, allowing the
  client-side validation logic to access and execute the validation functions.
-->
<Component type={type} {...props} validations={JSON.stringify(validations)} />
