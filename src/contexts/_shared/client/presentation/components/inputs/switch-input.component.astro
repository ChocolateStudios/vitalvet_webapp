---
export interface Props {
  id: string;
  name: string;
  label: string;
  value?: any;
  error?: string;
  class?: string;
  visible?: boolean;
  readonly?: boolean;
  tooltip?: string;
  trueValue?: any;
  falseValue?: any;
  trueLabel?: string;
  falseLabel?: string;
  trueTooltip?: string;
  falseTooltip?: string;
  validations?: any;
}

const {
  id,
  name,
  label,
  value,
  error,
  class: className,
  visible = true,
  readonly = false,
  tooltip,
  trueValue = true,
  falseValue = false,
  trueLabel,
  falseLabel,
  trueTooltip,
  falseTooltip,
  validations,
} = Astro.props as Props;

const isChecked = value === trueValue;
const initialHiddenValue = isChecked ? trueValue : falseValue;
const isDynamicLabel = !!(trueLabel && falseLabel);
const initialLabelText = isDynamicLabel
  ? isChecked
    ? trueLabel
    : falseLabel
  : label;
const isDynamicTooltip = !!(trueTooltip && falseTooltip);
const initialTooltipText = isDynamicTooltip
  ? isChecked
    ? trueTooltip
    : falseTooltip
  : tooltip;
---

<div class:list={["w-full group", className, { hidden: !visible }]}>
  <div class="flex items-center py-2.5 gap-3">
    <div class="flex items-center gap-2">
      <label
        for={id}
        id={`${id}-label`}
        class:list={[
          "text-base text-gray-900",
          readonly ? "cursor-not-allowed opacity-60" : "cursor-pointer",
        ]}
      >
        {initialLabelText}
      </label>
      {initialTooltipText && (
        <div class="relative flex items-center group/tooltip cursor-help">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            class="h-4 w-4 text-gray-400"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
            stroke-width="2"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
            ></path>
          </svg>
          <div
            id={`${id}-tooltip-text`}
            class="absolute bottom-full left-1/2 -translate-x-1/2 mb-2 w-max max-w-xs p-2 text-sm text-white bg-gray-800 rounded-md shadow-lg opacity-0 group-hover/tooltip:opacity-100 transition-opacity pointer-events-none z-10"
          >
            {initialTooltipText}
          </div>
        </div>
      )}
    </div>

    <div class="flex items-center">
      <input
        type="hidden"
        {name}
        id={`${id}-value`}
        value={String(initialHiddenValue)}
        data-validations={validations}
      />
      <label
        for={id}
        class:list={[
          "relative inline-flex items-center",
          readonly ? "cursor-not-allowed" : "cursor-pointer",
        ]}
      >
        <input
          type="checkbox"
          {id}
          checked={isChecked}
          disabled={readonly}
          class="sr-only peer"
          data-true-value={String(trueValue)}
          data-false-value={String(falseValue)}
          data-true-label={trueLabel}
          data-false-label={falseLabel}
          data-true-tooltip={trueTooltip}
          data-false-tooltip={falseTooltip}
        />
        <div
          class:list={[
            "w-11 h-6 bg-gray-200 rounded-full",
            "peer-focus:outline-none peer-focus:ring-2 peer-focus:ring-offset-2 peer-focus:ring-[#6faab5]",
            "peer-checked:after:translate-x-full peer-checked:after:border-white",
            "after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all",
            { "peer-checked:bg-[#6faab5]": !readonly },
            { "opacity-60": readonly },
          ]}
        ></div>
      </label>
    </div>
  </div>
  <div id={`${id}-error-container`} class="mt-1 text-sm text-red-600 h-4">
    {error}
  </div>
</div>

<script>
  function initializeSwitches() {
    document
      .querySelectorAll('input[type="checkbox"].peer:not([data-initialized])')
      .forEach((switchEl) => {
        const htmlSwitchEl = switchEl as HTMLInputElement;
        if (htmlSwitchEl.hasAttribute('data-initialized')) return;
        htmlSwitchEl.setAttribute('data-initialized', 'true');

        const hiddenInput = document.getElementById(
          `${htmlSwitchEl.id}-value`,
        ) as HTMLInputElement | null;
        const labelEl = document.getElementById(
          `${htmlSwitchEl.id}-label`,
        ) as HTMLLabelElement | null;
        const tooltipTextEl = document.getElementById(
          `${htmlSwitchEl.id}-tooltip-text`,
        ) as HTMLDivElement | null;

        if (!hiddenInput || htmlSwitchEl.disabled) return;

        htmlSwitchEl.addEventListener("change", () => {
          hiddenInput.value = htmlSwitchEl.checked
            ? htmlSwitchEl.dataset.trueValue!
            : htmlSwitchEl.dataset.falseValue!;

          const trueLabel = htmlSwitchEl.dataset.trueLabel;
          const falseLabel = htmlSwitchEl.dataset.falseLabel;
          if (labelEl && trueLabel && falseLabel) {
            labelEl.textContent = htmlSwitchEl.checked ? trueLabel : falseLabel;
          }

          const trueTooltip = htmlSwitchEl.dataset.trueTooltip;
          const falseTooltip = htmlSwitchEl.dataset.falseTooltip;
          if (tooltipTextEl && trueTooltip && falseTooltip) {
            tooltipTextEl.textContent = htmlSwitchEl.checked
              ? trueTooltip
              : falseTooltip;
          }

          const event = new CustomEvent('form:input', {
              bubbles: true,
              composed: true,
              detail: {
                  name: hiddenInput.name,
                  value: hiddenInput.value
              }
          });
          hiddenInput.dispatchEvent(event);
        });
      });
  }

  document.addEventListener("astro:page-load", initializeSwitches);
</script>
